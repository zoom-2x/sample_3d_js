(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={"name": ["package/textures/voxels/grid_base.bmp", "package/textures/voxels/column_side_0.bmp", "package/textures/voxels/column_side_0rcw.bmp", "package/textures/voxels/column_side_1.bmp", "package/textures/voxels/column_side_1rccw.bmp", "package/textures/voxels/column_side_1rcw.bmp", "package/textures/voxels/column_top_0.bmp", "package/textures/voxels/matrix_cube.bmp", "package/textures/voxels/matrix_cube_top.bmp", "package/textures/voxels/matrix_cube_bottom.bmp", "package/textures/voxels/bricks_0.bmp", "package/textures/voxels/bricks_1.bmp", "package/textures/voxels/floor_tile_0.bmp", "package/textures/voxels/floor_tile_1.bmp", "package/textures/voxels/floor_tile_2.bmp", "package/textures/voxels/bricks_1_bottom.bmp", "package/textures/voxels/bricks_1_top.bmp", "package/textures/voxels/deco_0.bmp", "package/textures/voxels/light_0.bmp", "package/textures/voxels/deco_1.bmp", "package/textures/voxels/light_1.bmp", "package/textures/voxels/deco_2.bmp", "package/textures/voxels/metal_0.bmp", "package/textures/voxels/metal_1.bmp", "package/textures/voxels/chessboard_x2.bmp", "package/textures/voxels/chessboard_x4.bmp"], "size": [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], "shift": [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], "offset": [0, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600], "data}
},{}],2:[function(require,module,exports){
"use strict";
/*
 * A fast javascript implementation of simplex noise by Jonas Wagner

Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
Better rank ordering method by Stefan Gustavson in 2012.

 Copyright (c) 2022 Jonas Wagner

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPermutationTable = exports.createNoise4D = exports.createNoise3D = exports.createNoise2D = void 0;
// these #__PURE__ comments help uglifyjs with dead code removal
// 
const F2 = /*#__PURE__*/ 0.5 * (Math.sqrt(3.0) - 1.0);
const G2 = /*#__PURE__*/ (3.0 - Math.sqrt(3.0)) / 6.0;
const F3 = 1.0 / 3.0;
const G3 = 1.0 / 6.0;
const F4 = /*#__PURE__*/ (Math.sqrt(5.0) - 1.0) / 4.0;
const G4 = /*#__PURE__*/ (5.0 - Math.sqrt(5.0)) / 20.0;
// I'm really not sure why this | 0 (basically a coercion to int)
// is making this faster but I get ~5 million ops/sec more on the
// benchmarks across the board or a ~10% speedup.
const fastFloor = (x) => Math.floor(x) | 0;
const grad2 = /*#__PURE__*/ new Float64Array([1, 1,
    -1, 1,
    1, -1,
    -1, -1,
    1, 0,
    -1, 0,
    1, 0,
    -1, 0,
    0, 1,
    0, -1,
    0, 1,
    0, -1]);
// double seems to be faster than single or int's
// probably because most operations are in double precision
const grad3 = /*#__PURE__*/ new Float64Array([1, 1, 0,
    -1, 1, 0,
    1, -1, 0,
    -1, -1, 0,
    1, 0, 1,
    -1, 0, 1,
    1, 0, -1,
    -1, 0, -1,
    0, 1, 1,
    0, -1, 1,
    0, 1, -1,
    0, -1, -1]);
// double is a bit quicker here as well
const grad4 = /*#__PURE__*/ new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,
    0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,
    1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,
    -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,
    1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,
    -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,
    1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,
    -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);
/**
 * Creates a 2D noise function
 * @param random the random function that will be used to build the permutation table
 * @returns {NoiseFunction2D}
 */
function createNoise2D(random = Math.random) {
    const perm = buildPermutationTable(random);
    // precalculating this yields a little ~3% performance improvement.
    const permGrad2x = new Float64Array(perm).map(v => grad2[(v % 12) * 2]);
    const permGrad2y = new Float64Array(perm).map(v => grad2[(v % 12) * 2 + 1]);
    return function noise2D(x, y) {
        // if(!isFinite(x) || !isFinite(y)) return 0;
        let n0 = 0; // Noise contributions from the three corners
        let n1 = 0;
        let n2 = 0;
        // Skew the input space to determine which simplex cell we're in
        const s = (x + y) * F2; // Hairy factor for 2D
        const i = fastFloor(x + s);
        const j = fastFloor(y + s);
        const t = (i + j) * G2;
        const X0 = i - t; // Unskew the cell origin back to (x,y) space
        const Y0 = j - t;
        const x0 = x - X0; // The x,y distances from the cell origin
        const y0 = y - Y0;
        // For the 2D case, the simplex shape is an equilateral triangle.
        // Determine which simplex we are in.
        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
        if (x0 > y0) {
            i1 = 1;
            j1 = 0;
        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
        else {
            i1 = 0;
            j1 = 1;
        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
        // c = (3-sqrt(3))/6
        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
        const y1 = y0 - j1 + G2;
        const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
        const y2 = y0 - 1.0 + 2.0 * G2;
        // Work out the hashed gradient indices of the three simplex corners
        const ii = i & 255;
        const jj = j & 255;
        // Calculate the contribution from the three corners
        let t0 = 0.5 - x0 * x0 - y0 * y0;
        if (t0 >= 0) {
            const gi0 = ii + perm[jj];
            const g0x = permGrad2x[gi0];
            const g0y = permGrad2y[gi0];
            t0 *= t0;
            // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient
            n0 = t0 * t0 * (g0x * x0 + g0y * y0);
        }
        let t1 = 0.5 - x1 * x1 - y1 * y1;
        if (t1 >= 0) {
            const gi1 = ii + i1 + perm[jj + j1];
            const g1x = permGrad2x[gi1];
            const g1y = permGrad2y[gi1];
            t1 *= t1;
            // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);
            n1 = t1 * t1 * (g1x * x1 + g1y * y1);
        }
        let t2 = 0.5 - x2 * x2 - y2 * y2;
        if (t2 >= 0) {
            const gi2 = ii + 1 + perm[jj + 1];
            const g2x = permGrad2x[gi2];
            const g2y = permGrad2y[gi2];
            t2 *= t2;
            // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);
            n2 = t2 * t2 * (g2x * x2 + g2y * y2);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to return values in the interval [-1,1].
        return 70.0 * (n0 + n1 + n2);
    };
}
exports.createNoise2D = createNoise2D;
/**
 * Creates a 3D noise function
 * @param random the random function that will be used to build the permutation table
 * @returns {NoiseFunction3D}
 */
function createNoise3D(random = Math.random) {
    const perm = buildPermutationTable(random);
    // precalculating these seems to yield a speedup of over 15%
    const permGrad3x = new Float64Array(perm).map(v => grad3[(v % 12) * 3]);
    const permGrad3y = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 1]);
    const permGrad3z = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 2]);
    return function noise3D(x, y, z) {
        let n0, n1, n2, n3; // Noise contributions from the four corners
        // Skew the input space to determine which simplex cell we're in
        const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D
        const i = fastFloor(x + s);
        const j = fastFloor(y + s);
        const k = fastFloor(z + s);
        const t = (i + j + k) * G3;
        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space
        const Y0 = j - t;
        const Z0 = k - t;
        const x0 = x - X0; // The x,y,z distances from the cell origin
        const y0 = y - Y0;
        const z0 = z - Z0;
        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
        // Determine which simplex we are in.
        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
        if (x0 >= y0) {
            if (y0 >= z0) {
                i1 = 1;
                j1 = 0;
                k1 = 0;
                i2 = 1;
                j2 = 1;
                k2 = 0;
            } // X Y Z order
            else if (x0 >= z0) {
                i1 = 1;
                j1 = 0;
                k1 = 0;
                i2 = 1;
                j2 = 0;
                k2 = 1;
            } // X Z Y order
            else {
                i1 = 0;
                j1 = 0;
                k1 = 1;
                i2 = 1;
                j2 = 0;
                k2 = 1;
            } // Z X Y order
        }
        else { // x0<y0
            if (y0 < z0) {
                i1 = 0;
                j1 = 0;
                k1 = 1;
                i2 = 0;
                j2 = 1;
                k2 = 1;
            } // Z Y X order
            else if (x0 < z0) {
                i1 = 0;
                j1 = 1;
                k1 = 0;
                i2 = 0;
                j2 = 1;
                k2 = 1;
            } // Y Z X order
            else {
                i1 = 0;
                j1 = 1;
                k1 = 0;
                i2 = 1;
                j2 = 1;
                k2 = 0;
            } // Y X Z order
        }
        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
        // c = 1/6.
        const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
        const y1 = y0 - j1 + G3;
        const z1 = z0 - k1 + G3;
        const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
        const y2 = y0 - j2 + 2.0 * G3;
        const z2 = z0 - k2 + 2.0 * G3;
        const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
        const y3 = y0 - 1.0 + 3.0 * G3;
        const z3 = z0 - 1.0 + 3.0 * G3;
        // Work out the hashed gradient indices of the four simplex corners
        const ii = i & 255;
        const jj = j & 255;
        const kk = k & 255;
        // Calculate the contribution from the four corners
        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
        if (t0 < 0)
            n0 = 0.0;
        else {
            const gi0 = ii + perm[jj + perm[kk]];
            t0 *= t0;
            n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);
        }
        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
        if (t1 < 0)
            n1 = 0.0;
        else {
            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];
            t1 *= t1;
            n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);
        }
        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
        if (t2 < 0)
            n2 = 0.0;
        else {
            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];
            t2 *= t2;
            n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);
        }
        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
        if (t3 < 0)
            n3 = 0.0;
        else {
            const gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];
            t3 *= t3;
            n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to stay just inside [-1,1]
        return 32.0 * (n0 + n1 + n2 + n3);
    };
}
exports.createNoise3D = createNoise3D;
/**
 * Creates a 4D noise function
 * @param random the random function that will be used to build the permutation table
 * @returns {NoiseFunction4D}
 */
function createNoise4D(random = Math.random) {
    const perm = buildPermutationTable(random);
    // precalculating these leads to a ~10% speedup
    const permGrad4x = new Float64Array(perm).map(v => grad4[(v % 32) * 4]);
    const permGrad4y = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 1]);
    const permGrad4z = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 2]);
    const permGrad4w = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 3]);
    return function noise4D(x, y, z, w) {
        let n0, n1, n2, n3, n4; // Noise contributions from the five corners
        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
        const s = (x + y + z + w) * F4; // Factor for 4D skewing
        const i = fastFloor(x + s);
        const j = fastFloor(y + s);
        const k = fastFloor(z + s);
        const l = fastFloor(w + s);
        const t = (i + j + k + l) * G4; // Factor for 4D unskewing
        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
        const Y0 = j - t;
        const Z0 = k - t;
        const W0 = l - t;
        const x0 = x - X0; // The x,y,z,w distances from the cell origin
        const y0 = y - Y0;
        const z0 = z - Z0;
        const w0 = w - W0;
        // For the 4D case, the simplex is a 4D shape I won't even try to describe.
        // To find out which of the 24 possible simplices we're in, we need to
        // determine the magnitude ordering of x0, y0, z0 and w0.
        // Six pair-wise comparisons are performed between each possible pair
        // of the four coordinates, and the results are used to rank the numbers.
        let rankx = 0;
        let ranky = 0;
        let rankz = 0;
        let rankw = 0;
        if (x0 > y0)
            rankx++;
        else
            ranky++;
        if (x0 > z0)
            rankx++;
        else
            rankz++;
        if (x0 > w0)
            rankx++;
        else
            rankw++;
        if (y0 > z0)
            ranky++;
        else
            rankz++;
        if (y0 > w0)
            ranky++;
        else
            rankw++;
        if (z0 > w0)
            rankz++;
        else
            rankw++;
        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
        // impossible. Only the 24 indices which have non-zero entries make any sense.
        // We use a thresholding to set the coordinates in turn from the largest magnitude.
        // Rank 3 denotes the largest coordinate.
        // Rank 2 denotes the second largest coordinate.
        // Rank 1 denotes the second smallest coordinate.
        // The integer offsets for the second simplex corner
        const i1 = rankx >= 3 ? 1 : 0;
        const j1 = ranky >= 3 ? 1 : 0;
        const k1 = rankz >= 3 ? 1 : 0;
        const l1 = rankw >= 3 ? 1 : 0;
        // The integer offsets for the third simplex corner
        const i2 = rankx >= 2 ? 1 : 0;
        const j2 = ranky >= 2 ? 1 : 0;
        const k2 = rankz >= 2 ? 1 : 0;
        const l2 = rankw >= 2 ? 1 : 0;
        // The integer offsets for the fourth simplex corner
        const i3 = rankx >= 1 ? 1 : 0;
        const j3 = ranky >= 1 ? 1 : 0;
        const k3 = rankz >= 1 ? 1 : 0;
        const l3 = rankw >= 1 ? 1 : 0;
        // The fifth corner has all coordinate offsets = 1, so no need to compute that.
        const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
        const y1 = y0 - j1 + G4;
        const z1 = z0 - k1 + G4;
        const w1 = w0 - l1 + G4;
        const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords
        const y2 = y0 - j2 + 2.0 * G4;
        const z2 = z0 - k2 + 2.0 * G4;
        const w2 = w0 - l2 + 2.0 * G4;
        const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords
        const y3 = y0 - j3 + 3.0 * G4;
        const z3 = z0 - k3 + 3.0 * G4;
        const w3 = w0 - l3 + 3.0 * G4;
        const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords
        const y4 = y0 - 1.0 + 4.0 * G4;
        const z4 = z0 - 1.0 + 4.0 * G4;
        const w4 = w0 - 1.0 + 4.0 * G4;
        // Work out the hashed gradient indices of the five simplex corners
        const ii = i & 255;
        const jj = j & 255;
        const kk = k & 255;
        const ll = l & 255;
        // Calculate the contribution from the five corners
        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
        if (t0 < 0)
            n0 = 0.0;
        else {
            const gi0 = ii + perm[jj + perm[kk + perm[ll]]];
            t0 *= t0;
            n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);
        }
        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
        if (t1 < 0)
            n1 = 0.0;
        else {
            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];
            t1 *= t1;
            n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);
        }
        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
        if (t2 < 0)
            n2 = 0.0;
        else {
            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];
            t2 *= t2;
            n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);
        }
        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
        if (t3 < 0)
            n3 = 0.0;
        else {
            const gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];
            t3 *= t3;
            n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);
        }
        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
        if (t4 < 0)
            n4 = 0.0;
        else {
            const gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];
            t4 *= t4;
            n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);
        }
        // Sum up and scale the result to cover the range [-1,1]
        return 27.0 * (n0 + n1 + n2 + n3 + n4);
    };
}
exports.createNoise4D = createNoise4D;
/**
 * Builds a random permutation table.
 * This is exported only for (internal) testing purposes.
 * Do not rely on this export.
 * @private
 */
function buildPermutationTable(random) {
    const tableSize = 512;
    const p = new Uint8Array(tableSize);
    for (let i = 0; i < tableSize / 2; i++) {
        p[i] = i;
    }
    for (let i = 0; i < tableSize / 2 - 1; i++) {
        const r = i + ~~(random() * (256 - i));
        const aux = p[i];
        p[i] = p[r];
        p[r] = aux;
    }
    for (let i = 256; i < tableSize; i++) {
        p[i] = p[i - 256];
    }
    return p;
}
exports.buildPermutationTable = buildPermutationTable;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Common;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var color_0 = [0, 0, 0];
var color_1 = [0, 0, 0];
var color_2 = [0, 0, 0];
var color_3 = [0, 0, 0];
var color_4 = [0, 0, 0];
var color_5 = [0, 0, 0];
var Common = (_Common = {
  TWO_PI: 2 * Math.PI,
  ONE80_OVER_PI: 57.2957795130823208768,
  PI_OVER_ONE80: 0.01745329251994329577,
  EPSILON: 0.0000001,
  ONE_OVER_255: 0.00392156862745098039,
  // ----------------------------------------------------------------------------------
  // -- Voxel object rotations P(x,y,z)
  // ----------------------------------------------------------------------------------
  // ox cw(90) / (Px,-Pz,Py)
  // ox ccw(-90) / (Px,Pz,-Py)
  // ox flip(180) / (Px,-Py,-Pz)
  // oy cw(90) / (Pz,Py,-Px)
  // oy ccw(-90) / (-Pz,Py,Px)
  // oy flip(180) / (-Px,Py,-Pz)
  // oz ccw(90) / (-Py,Px,Pz)
  // oz cw(-90) / (Py,-Px,Pz)
  // oz flip(180) / (-Px,-Py,Pz)
  // ----------------------------------------------------------------------------------

  VOXEL_ROXCW: 0,
  VOXEL_ROXCCW: 1,
  VOXEL_ROXFLIP: 2,
  VOXEL_ROYCCW: 3
}, _defineProperty(_Common, "VOXEL_ROYCCW", 4), _defineProperty(_Common, "VOXEL_ROYFLIP", 5), _defineProperty(_Common, "VOXEL_ROZCCW", 6), _defineProperty(_Common, "VOXEL_ROZCW", 7), _defineProperty(_Common, "VOXEL_ROZFLIP", 8), _defineProperty(_Common, "voxel_rotations", [[0, 2, 1, 1, -1, 1], [0, 2, 1, 1, 1, -1], [0, 1, 2, 1, -1, -1], [2, 1, 0, 1, 1, -1], [2, 1, 0, -1, 1, 1], [0, 1, 2, -1, 1, -1], [1, 0, 2, -1, 1, 1], [1, 0, 2, 1, -1, 1], [0, 1, 2, -1, -1, 1]]), _defineProperty(_Common, "rad2deg", function rad2deg(angle) {
  return angle * Common.ONE80_OVER_PI;
}), _defineProperty(_Common, "deg2rad", function deg2rad(angle) {
  return angle * Common.PI_OVER_ONE80;
}), _defineProperty(_Common, "color_one_to_255", function color_one_to_255(c) {
  c[0] *= 255;
  c[1] *= 255;
  c[2] *= 255;
  return c;
}), _defineProperty(_Common, "color_255_to_one", function color_255_to_one(c) {
  c[0] *= Common.ONE_OVER_255;
  c[1] *= Common.ONE_OVER_255;
  c[2] *= Common.ONE_OVER_255;
  return c;
}), _defineProperty(_Common, "color_clamp", function color_clamp(c) {
  c[0] = Common.clamp(c[0], 0, 255);
  c[1] = Common.clamp(c[1], 0, 255);
  c[2] = Common.clamp(c[2], 0, 255);
}), _defineProperty(_Common, "color_reinhard", function color_reinhard(c) {
  c[0] = 255 * c[0] / (c[0] + 255);
  c[1] = 255 * c[1] / (c[1] + 255);
  c[2] = 255 * c[2] / (c[2] + 255);
}), _defineProperty(_Common, "clamp", function clamp(val, min, max) {
  if (val < min) val = min;else if (val > max) val = max;
  return val;
}), _defineProperty(_Common, "color_mult", function color_mult(c, m) {
  var res = [0, 0, 0, 0];
  res[0] = c[0] * m;
  res[1] = c[1] * m;
  res[2] = c[2] * m;
  res[3] = c[3];
  return res;
}), _defineProperty(_Common, "vec3_add", function vec3_add(v1, v2) {
  var res = [0, 0, 0];
  res[0] = v1[0] + v2[0];
  res[1] = v1[1] + v2[1];
  res[2] = v1[2] + v2[2];
  return res;
}), _defineProperty(_Common, "vec3_sub", function vec3_sub(v1, v2) {
  var res = [0, 0, 0];
  res[0] = v1[0] - v2[0];
  res[1] = v1[1] - v2[1];
  res[2] = v1[2] - v2[2];
  return res;
}), _defineProperty(_Common, "vec3_dot", function vec3_dot(v1, v2) {
  return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
}), _defineProperty(_Common, "vec3_len", function vec3_len(v) {
  return Math.sqrt(Common.vec3_dot(v, v));
}), _defineProperty(_Common, "vec3_len2", function vec3_len2(v) {
  return Common.vec3_dot(v, v);
}), _defineProperty(_Common, "vec3_cross", function vec3_cross(v1, v2) {
  var res = [0, 0, 0];
  res[0] = v1[1] * v2[2] - v1[2] * v2[1];
  res[1] = v1[2] * v2[0] - v1[0] * v2[2];
  res[2] = v1[0] * v2[1] - v1[1] * v2[0];
  return res;
}), _defineProperty(_Common, "vec3_normalize", function vec3_normalize(v) {
  var len = 1 / Common.vec3_len(v);
  v[0] *= len;
  v[1] *= len;
  v[2] *= len;
  return v;
}), _defineProperty(_Common, "rotate_x", function rotate_x(p, angle) {
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  var t0 = cos * p[1] - sin * p[2];
  var t1 = sin * p[1] + cos * p[2];
  p[1] = t0;
  p[2] = t1;
}), _defineProperty(_Common, "rotate_y", function rotate_y(p, angle) {
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  var t0 = cos * p[0] + sin * p[2];
  var t1 = -sin * p[0] + cos * p[2];
  p[0] = t0;
  p[2] = t1;
}), _defineProperty(_Common, "rotate_z", function rotate_z(p, angle) {
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  var t0 = cos * p[0] - sin * p[1];
  var t1 = sin * p[0] + cos * p[1];
  p[0] = t0;
  p[1] = t1;
}), _defineProperty(_Common, "rotate_around_x", function rotate_around_x(p, angle) {
  var res = [0, 0, 0];
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  res[0] = p[0];
  res[1] = cos * p[1] - sin * p[2];
  res[2] = sin * p[1] + cos * p[2];
  return res;
}), _defineProperty(_Common, "rotate_around_y", function rotate_around_y(p, angle) {
  var res = [0, 0, 0];
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  res[0] = cos * p[0] + sin * p[2];
  res[1] = p[1];
  res[2] = -sin * p[0] + cos * p[2];
  return res;
}), _defineProperty(_Common, "rotate_around_z", function rotate_around_z(p, angle) {
  var res = [0, 0, 0];
  var sin = Math.sin(angle);
  var cos = Math.cos(angle);
  res[0] = cos * p[0] - sin * p[1];
  res[1] = sin * p[0] + cos * p[1];
  res[2] = p[2];
  return res;
}), _defineProperty(_Common, "mat4_empty", function mat4_empty() {
  var mat = new Array(4 * 4);
  mat[0] = 0;
  mat[1] = 0;
  mat[2] = 0;
  mat[3] = 0;
  mat[4] = 0;
  mat[5] = 0;
  mat[6] = 0;
  mat[7] = 0;
  mat[8] = 0;
  mat[9] = 0;
  mat[10] = 0;
  mat[11] = 0;
  mat[12] = 0;
  mat[13] = 0;
  mat[14] = 0;
  mat[15] = 0;
  return mat;
}), _defineProperty(_Common, "mat4_identity", function mat4_identity() {
  var mat = new Array(4 * 4);
  mat[0] = 1;
  mat[1] = 0;
  mat[2] = 0;
  mat[3] = 0;
  mat[4] = 0;
  mat[5] = 1;
  mat[6] = 0;
  mat[7] = 0;
  mat[8] = 0;
  mat[9] = 0;
  mat[10] = 1;
  mat[11] = 0;
  mat[12] = 0;
  mat[13] = 0;
  mat[14] = 0;
  mat[15] = 1;
  return mat;
}), _defineProperty(_Common, "mat4_scale", function mat4_scale(sx, sy, sz) {
  var mat = Common.mat4_identity();
  mat[0] = sx;
  mat[5] = sy;
  mat[10] = sz;
  return mat;
}), _defineProperty(_Common, "mat4_rotation_x", function mat4_rotation_x(angle) {
  var mat = Common.mat4_identity();
  var cos_t = Math.cos(angle);
  var sin_t = Math.sin(angle);
  mat[5] = cos_t;
  mat[6] = -sin_t;
  mat[9] = sin_t;
  mat[10] = cos_t;
  return mat;
}), _defineProperty(_Common, "mat4_rotation_y", function mat4_rotation_y(angle) {
  var mat = Common.mat4_identity();
  var cos_t = Math.cos(angle);
  var sin_t = Math.sin(angle);
  mat[0] = cos_t;
  mat[8] = -sin_t;
  mat[2] = sin_t;
  mat[10] = cos_t;
  return mat;
}), _defineProperty(_Common, "mat4_rotation_z", function mat4_rotation_z(angle) {
  var mat = Common.mat4_identity();
  var cos_t = Math.cos(angle);
  var sin_t = Math.sin(angle);
  mat[0] = cos_t;
  mat[4] = sin_t;
  mat[1] = -sin_t;
  mat[5] = cos_t;
  return mat;
}), _defineProperty(_Common, "mat4_mul_vec3", function mat4_mul_vec3(m, v) {
  var result = [0, 0, 0];
  result[0] = m[0] * v[0] + m[0] * v[1] + m[0] * v[2];
  result[1] = m[4] * v[0] + m[5] * v[1] + m[6] * v[2];
  result[2] = m[8] * v[0] + m[9] * v[1] + m[10] * v[2];
  return result;
}), _defineProperty(_Common, "mat4_mulvec", function mat4_mulvec(m, v) {
  var res = [0, 0, 0, 1];
  res[0] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3];
  res[1] = m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3];
  res[2] = m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3];
  res[3] = m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3];
  return res;
}), _defineProperty(_Common, "transform_point", function transform_point(m, p) {
  var res = [0, 0, 0, 1];
  res[0] = m[0] * p[0] + m[1] * p[1] + m[2] * p[2] + m[3];
  res[1] = m[4] * p[0] + m[5] * p[1] + m[6] * p[2] + m[7];
  res[2] = m[8] * p[0] + m[9] * p[1] + m[10] * p[2] + m[11];
  res[3] = m[12] * p[0] + m[13] * p[1] + m[14] * p[2] + m[15];
  return res;
}), _defineProperty(_Common, "transform_point_buffer", function transform_point_buffer(m, px, py, pz, buffer, from) {
  buffer[from + 0] = m[0] * px + m[1] * py + m[2] * pz + m[3];
  buffer[from + 1] = m[4] * px + m[5] * py + m[6] * pz + m[7];
  buffer[from + 2] = m[8] * px + m[9] * py + m[10] * pz + m[11];
  buffer[from + 3] = m[12] * px + m[13] * py + m[14] * pz + m[15];
}), _defineProperty(_Common, "transform_vector", function transform_vector(m, p) {
  var res = [0, 0, 0, 0];
  res[0] = m[0] * p[0] + m[1] * p[1] + m[2] * p[2] + m[3];
  res[1] = m[4] * p[0] + m[5] * p[1] + m[6] * p[2] + m[7];
  res[2] = m[8] * p[0] + m[9] * p[1] + m[12] * p[2] + m[13];
  return res;
}), _defineProperty(_Common, "perspective_division", function perspective_division(p) {
  var res = [0, 0, 0, 1];
  res[3] = 1.0 / p[3];
  res[0] = p[0] * res[3];
  res[1] = p[1] * res[3];
  res[2] = p[2] * res[3];
  return res;
}), _defineProperty(_Common, "perspective_division_buffer", function perspective_division_buffer(buffer, from) {
  var t = 1.0 / buffer[from + 3];
  buffer[from + 3] = t;
  buffer[from + 0] *= t;
  buffer[from + 1] *= t;
  buffer[from + 2] *= t;
}), _defineProperty(_Common, "viewport_transform", function viewport_transform(m, p) {
  var res = [0, 0, 0, 0];
  res[0] = m[0] * p[0] + m[3];
  res[1] = m[5] * p[1] + m[7];
  res[2] = m[10] * p[2] + m[11];
  res[3] = p[3];
  return res;
}), _defineProperty(_Common, "viewport_transform_buffer", function viewport_transform_buffer(m, buffer, from) {
  buffer[from + 0] = m[0] * buffer[from + 0] + m[3];
  buffer[from + 1] = m[5] * buffer[from + 1] + m[7];
  buffer[from + 2] = m[10] * buffer[from + 2] + m[11];
  buffer[from + 3] = buffer[from + 3];
}), _defineProperty(_Common, "triangle_project", function triangle_project(m, buffer) {
  var x, y, z, w;
  for (var i = 0; i < 3; ++i) {
    x = buffer[i][0];
    y = buffer[i][1];
    z = buffer[i][2];
    buffer[i][0] = m[0] * x + m[1] * y + m[2] * z + m[3];
    buffer[i][1] = m[4] * x + m[5] * y + m[6] * z + m[7];
    buffer[i][2] = m[8] * x + m[9] * y + m[10] * z + m[11];
    buffer[i][3] = m[12] * x + m[13] * y + m[14] * z + m[15];
    w = 1.0 / buffer[i][3];
    buffer[i][0] *= w;
    buffer[i][1] *= w;
    buffer[i][2] *= w;
    buffer[i][3] = w;
  }
}), _defineProperty(_Common, "triangle_viewport_transform", function triangle_viewport_transform(m, buffer) {
  for (var i = 0; i < 3; ++i) {
    buffer[i][0] = m[0] * buffer[i][0] + m[3];
    buffer[i][1] = m[5] * buffer[i][1] + m[7];
    buffer[i][2] = m[10] * buffer[i][2] + m[11];
    // buffer[i][3] = buffer[from + 3];
  }
}), _defineProperty(_Common, "mat4_mul", function mat4_mul(m1, m2) {
  var mat = new Array(4 * 4);
  mat[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + m1[3] * m2[12];
  mat[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + m1[3] * m2[13];
  mat[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + m1[3] * m2[14];
  mat[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + m1[3] * m2[15];
  mat[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + m1[7] * m2[12];
  mat[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + m1[7] * m2[13];
  mat[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + m1[7] * m2[14];
  mat[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + m1[7] * m2[15];
  mat[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + m1[11] * m2[12];
  mat[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + m1[11] * m2[13];
  mat[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + m1[11] * m2[14];
  mat[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + m1[11] * m2[15];
  mat[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + m1[15] * m2[12];
  mat[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + m1[15] * m2[13];
  mat[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + m1[15] * m2[14];
  mat[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + m1[15] * m2[15];
  return mat;
}), _defineProperty(_Common, "mat4_mul_dest", function mat4_mul_dest(m1, m2, dest) {
  dest[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + m1[3] * m2[12];
  dest[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + m1[3] * m2[13];
  dest[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + m1[3] * m2[14];
  dest[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + m1[3] * m2[15];
  dest[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + m1[7] * m2[12];
  dest[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + m1[7] * m2[13];
  dest[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + m1[7] * m2[14];
  dest[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + m1[7] * m2[15];
  dest[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + m1[11] * m2[12];
  dest[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + m1[11] * m2[13];
  dest[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + m1[11] * m2[14];
  dest[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + m1[11] * m2[15];
  dest[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + m1[15] * m2[12];
  dest[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + m1[15] * m2[13];
  dest[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + m1[15] * m2[14];
  dest[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + m1[15] * m2[15];
}), _defineProperty(_Common, "mat4_det", function mat4_det(m) {
  // (0,0) minor.
  var det00 = m[5] * (m[10] * m[15] - m[11] * m[14]) - m[6] * (m[9] * m[15] - m[11] * m[13]) + m[7] * (m[9] * m[14] - m[10] * m[13]);

  // (0,1) minor.
  var det01 = m[4] * (m[10] * m[15] - m[11] * m[14]) - m[6] * (m[8] * m[15] - m[11] * m[12]) + m[7] * (m[8] * m[14] - m[10] * m[12]);

  // (0,2) minor.
  var det02 = m[4] * (m[9] * m[15] - m[11] * m[13]) - m[5] * (m[8] * m[15] - m[11] * m[12]) + m[7] * (m[8] * m[13] - m[9] * m[12]);

  // (0,3) minor.
  var det03 = m[4] * (m[9] * m[14] - m[10] * m[13]) - m[5] * (m[8] * m[14] - m[10] * m[12]) + m[6] * (m[8] * m[13] - m[9] * m[12]);
  var result = m[0] * det00 - m[1] * det01 + m[2] * det02 - m[3] * det03;
  return result;
}), _defineProperty(_Common, "mat4_lookat", function mat4_lookat(eye, target, up) {
  var mat = Common.mat4_identity();
  var z_axis = Common.vec3_normalize(Common.vec3_sub(eye, target));
  var x_axis = Common.vec3_normalize(Common.vec3_cross(up, z_axis));
  var y_axis = Common.vec3_normalize(Common.vec3_cross(z_axis, x_axis));

  // orthogonal axis => inverse = transpose (rotation).
  mat[0] = x_axis[0];
  mat[1] = x_axis[1];
  mat[2] = x_axis[2];
  mat[4] = y_axis[0];
  mat[5] = y_axis[1];
  mat[6] = y_axis[2];
  mat[8] = z_axis[0];
  mat[9] = z_axis[1];
  mat[10] = z_axis[2];

  // Extract the eye vector's components relative to the camera axis (translation).
  mat[3] = -Common.vec3_dot(x_axis, eye);
  mat[7] = -Common.vec3_dot(y_axis, eye);
  mat[11] = -Common.vec3_dot(z_axis, eye);
  return mat;
}), _defineProperty(_Common, "mat4_lookat_dest", function mat4_lookat_dest(eye, target, up, dest) {
  var z_axis = Common.vec3_normalize(Common.vec3_sub(eye, target));
  var x_axis = Common.vec3_normalize(Common.vec3_cross(up, z_axis));
  var y_axis = Common.vec3_normalize(Common.vec3_cross(z_axis, x_axis));

  // orthogonal axis => inverse = transpose (rotation).
  dest[0] = x_axis[0];
  dest[1] = x_axis[1];
  dest[2] = x_axis[2];
  dest[4] = y_axis[0];
  dest[5] = y_axis[1];
  dest[6] = y_axis[2];
  dest[8] = z_axis[0];
  dest[9] = z_axis[1];
  dest[10] = z_axis[2];

  // Extract the eye vector's components relative to the camera axis (translation).
  dest[3] = -Common.vec3_dot(x_axis, eye);
  dest[7] = -Common.vec3_dot(y_axis, eye);
  dest[11] = -Common.vec3_dot(z_axis, eye);
}), _defineProperty(_Common, "mat4_perspective", function mat4_perspective(aspect, fov, f_near, f_far) {
  var mat = Common.mat4_empty();
  var d = 1.0 / Math.tan(fov * 0.5);
  var s = f_near - f_far;
  mat[0] = d / aspect;
  mat[5] = d;
  mat[10] = (f_near + f_far) / s;
  mat[14] = -1;
  mat[11] = 2 * f_near * f_far / s;
  return mat;
}), _defineProperty(_Common, "mat4_perspective_dest", function mat4_perspective_dest(aspect, fov, f_near, f_far, dest) {
  var d = 1.0 / Math.tan(fov * 0.5);
  var s = f_near - f_far;
  dest[0] = d / aspect;
  dest[5] = d;
  dest[10] = (f_near + f_far) / s;
  dest[14] = -1;
  dest[11] = 2 * f_near * f_far / s;
}), _defineProperty(_Common, "mat4_orthographic", function mat4_orthographic(f_right, f_left, f_top, f_bottom, f_near, f_far) {
  var mat = Common.mat4_empty();
  var rml = f_right - f_left;
  var fmn = f_far - f_near;
  var tmb = f_top - f_bottom;
  mat[0] = 2 / rml;
  mat[5] = 2 / tmb;
  mat[10] = -2 / fmn;
  mat[15] = 1;
  mat[3] = -(f_right + f_left) / rml;
  mat[7] = -(f_top + f_bottom) / tmb;
  mat[11] = -(f_far + f_near) / fmn;
  return mat;
}), _defineProperty(_Common, "mat4_viewport", function mat4_viewport(ws, hs, sx, sy, ds) {
  var mat = Common.mat4_empty();
  var wh = ws / 2.0;
  var hh = hs / 2.0;
  var dh = ds / 2.0;
  mat[0] = wh;
  mat[3] = wh + sx;
  mat[5] = -hh;
  mat[7] = hh + sy;
  mat[10] = dh;
  mat[11] = dh;
  mat[15] = 1;
  return mat;
}), _defineProperty(_Common, "mat4_viewport_dest", function mat4_viewport_dest(ws, hs, sx, sy, ds, dest) {
  var wh = ws / 2.0;
  var hh = hs / 2.0;
  var dh = ds / 2.0;
  dest[0] = wh;
  dest[3] = wh + sx;
  dest[5] = -hh;
  dest[7] = hh + sy;
  dest[10] = dh;
  dest[11] = dh;
  dest[15] = 1;
}), _defineProperty(_Common, "clear_map", function clear_map(map, fill) {
  fill = fill ? 0x01000000 : 0;
  for (var z = 0; z < map.dims[2]; ++z) {
    for (var y = 0; y < map.dims[1]; ++y) {
      for (var x = 0; x < map.dims[0]; ++x) {
        map.data[Common.get_map_index(map, x, y, z)] = fill;
      }
    }
  }
}), _defineProperty(_Common, "get_map_index", function get_map_index(map, x, y, z) {
  return z << map.shift_z | y << map.shift_y | x;
}), _defineProperty(_Common, "get_camera_circle_rotation_angles", function get_camera_circle_rotation_angles(t, rot) {
  var res = [0, 0];
  var p = [rot.radius * Math.cos(t), 1, rot.radius * Math.sin(t)];
  res[0] = Math.asin(p[2] / rot.point_distance);
  res[1] = Math.atan2(p[0], rot.center_distance);
  return res;
}), _defineProperty(_Common, "get_camera_ellipse_rotation_angles", function get_camera_ellipse_rotation_angles(t, rot) {}), _defineProperty(_Common, "add_voxel_texture", function add_voxel_texture(Voxels, faces) {
  var index = Voxels.voxel_textures.length;
  if (toString.call(faces) == "[object Array]") Voxels.voxel_textures.push(faces);else if (toString.call(faces) == "[object Number]") Voxels.voxel_textures.push([faces, faces, faces, faces, faces, faces]);
  return index;
}), _defineProperty(_Common, "obj_push_data", function obj_push_data(obj, y, z, data) {
  if (obj.dims[0] == data.length) {
    for (var i = 0; i < data.length; ++i) {
      var tmp = [];

      // Format: [x, y, z, voxel_texture_id]
      tmp.push(i - obj.center[0]);
      tmp.push(y - obj.center[1]);
      tmp.push(z - obj.center[2]);
      tmp.push(data[i]);
      obj.data.push(tmp);
    }
  }
}), _defineProperty(_Common, "wall_ox", function wall_ox(map, point, width, height, texture_id) {
  var mx = point[0];
  for (var mz = point[2]; mz < point[2] + height; mz++) {
    for (var my = point[1]; my < point[1] + width; my++) {
      if (mx >= 0 && my >= 0 && mz >= 0 && mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2]) {
        var index = Common.get_map_index(map, mx, my, mz);
        map.data[index] = texture_id;
      }
    }
  }
}), _defineProperty(_Common, "wall_oy", function wall_oy(map, point, width, height, texture_id) {
  var my = point[1];
  for (var mz = point[2]; mz < point[2] + height; mz++) {
    for (var mx = point[0]; mx < point[0] + width; mx++) {
      if (mx >= 0 && my >= 0 && mz >= 0 && mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2]) {
        var index = Common.get_map_index(map, mx, my, mz);
        map.data[index] = texture_id;
      }
    }
  }
}), _defineProperty(_Common, "wall_oz", function wall_oz(map, point, width, height, texture_id) {
  var mz = point[2];
  for (var my = point[1]; my < point[1] + height; my++) {
    for (var mx = point[0]; mx < point[0] + width; mx++) {
      if (mx >= 0 && my >= 0 && mz >= 0 && mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2]) {
        var index = Common.get_map_index(map, mx, my, mz);
        map.data[index] = texture_id;
      }
    }
  }
}), _defineProperty(_Common, "valid_voxel", function valid_voxel(map, x, y, z) {
  return x >= 0 && x < map.dims[0] && y >= 0 && y < map.dims[1] && z >= 0 && z < map.dims[2];
}), _defineProperty(_Common, "brush_old", function brush_old(map, point, dims, texture_id) {
  for (var mz = point[2]; mz < point[2] + dims[2]; mz++) {
    for (var my = point[1]; my < point[1] + dims[1]; my++) {
      for (var mx = point[0]; mx < point[0] + dims[0]; mx++) {
        if (Common.valid_voxel(map, mx, my, mz)) {
          var index = Common.get_map_index(map, mx, my, mz);
          map.data[index] = texture_id;
        }
      }
    }
  }
}), _defineProperty(_Common, "brush", function brush(map, start, end, texture_id, paint) {
  paint = paint ? true : false;
  var sx = start[0];
  var sy = start[1];
  var sz = start[2];
  var ex = end[0];
  var ey = end[1];
  var ez = end[2];
  var tmp = 0;
  if (ex < sx) {
    tmp = sx;
    sx = ex;
    ex = tmp;
  }
  if (ey < sy) {
    tmp = sy;
    sy = ey;
    ey = tmp;
  }
  if (ez < sz) {
    tmp = sz;
    sz = ez;
    ez = tmp;
  }
  for (var mz = sz; mz <= ez; mz++) {
    for (var my = sy; my <= ey; my++) {
      for (var mx = sx; mx <= ex; mx++) {
        if (Common.valid_voxel(map, mx, my, mz)) {
          var index = Common.get_map_index(map, mx, my, mz);
          if (paint) {
            if (map.data[index]) map.data[index] = texture_id;
          } else map.data[index] = texture_id;
        }
      }
    }
  }
}), _defineProperty(_Common, "voxel_object_space_rotation", function voxel_object_space_rotation(p, rotation) {
  var res = [p[0], p[1], p[2]];
  if (rotation) {
    rotation.forEach(function (index) {
      var rotation = Common.voxel_rotations[index];
      var tmp = [res[0], res[1], res[2]];
      res[0] = tmp[rotation[0]] * rotation[3];
      res[1] = tmp[rotation[1]] * rotation[4];
      res[2] = tmp[rotation[2]] * rotation[5];
    });
  }
  return res;
}), _defineProperty(_Common, "map_add_object", function map_add_object(map, pos, object, rotation, texture_id) {
  object.data.forEach(function (voxel) {
    var rv = Common.voxel_object_space_rotation(voxel, rotation);
    var mx = pos[0] + rv[0];
    var my = pos[1] + rv[1];
    var mz = pos[2] + rv[2];
    if (mx >= 0 && my >= 0 && mz >= 0 && mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2]) {
      var index = Common.get_map_index(map, mx, my, mz);
      map.data[index] = voxel[3] >= 0 && texture_id ? texture_id : voxel[3];
    }
  });
}), _defineProperty(_Common, "float_snap", function float_snap(v) {
  var epsilon = 0.00000001;
  var s = v < 0 ? -1 : 1;
  var a = Math.abs(v);
  var f = Math.floor(a);
  var c = Math.ceil(a);
  if (a - f < epsilon) return f * s;else if (c - a < epsilon) return c * s;
  return v;
}), _defineProperty(_Common, "get_voxel", function get_voxel(map, point) {
  var x = Math.floor(point[0]);
  var y = Math.floor(point[1]);
  var z = Math.floor(point[2]);
  if (map.wrap[0]) {
    x %= map.dims[0];
    if (x < 0) x += map.dims[0];
  } else if (x < 0 || x >= map.dims[0]) return [-1, -1, -1];
  if (map.wrap[1]) {
    y %= map.dims[1];
    if (y < 0) y += map.dims[1];
  } else if (y < 0 || y >= map.dims[1]) return [-1, -1, -1];
  if (map.wrap[2]) {
    z %= map.dims[2];
    if (z < 0) z += map.dims[2];
  } else if (z < 0 || z >= map.dims[2]) return [-1, -1, -1];
  return [x, y, z];
}), _defineProperty(_Common, "sample_texture", function sample_texture(texture_data, sampler, u, v, buffer) {
  u += 0.00001;
  v += 0.00001;
  if (u >= 1) u = 0.9999999999;
  if (v >= 1) v = 0.9999999999;
  var tex_x = u * sampler.tex_width | 0;
  var tex_y = (1 - v) * sampler.tex_height | 0;
  var pointer = sampler.tex_pointer + ((tex_y << sampler.tex_width_shift | tex_x) << 2);
  buffer[0] = texture_data[pointer + 0];
  buffer[1] = texture_data[pointer + 1];
  buffer[2] = texture_data[pointer + 2];
}), _defineProperty(_Common, "sample_texture_filtering", function sample_texture_filtering(texture_data, sampler, u, v, buffer) {
  u += 0.00001;
  v += 0.00001;
  if (u >= 1) u = 0.9999999999;
  if (v >= 1) v = 0.9999999999;
  var tex_xf = u * sampler.tex_width;
  var tex_yf = (1 - v) * sampler.tex_height;
  var tex_xstart = tex_xf | 0;
  var tex_ystart = tex_yf | 0;
  var tex_xend = tex_xstart + 1;
  var tex_yend = tex_ystart + 1;
  if (tex_xend >= sampler.tex_width) tex_xend = sampler.tex_width - 1;
  if (tex_yend >= sampler.tex_height) tex_yend = sampler.tex_height - 1;
  var s = tex_xf % 1;
  var t = tex_yf % 1;
  var c0 = tex_ystart << sampler.tex_width_shift;
  var c1 = tex_yend << sampler.tex_width_shift;
  var pointer_sample_0 = sampler.tex_pointer + ((c0 | tex_xstart) << 2);
  var pointer_sample_1 = sampler.tex_pointer + ((c0 | tex_xend) << 2);
  var pointer_sample_2 = sampler.tex_pointer + ((c1 | tex_xstart) << 2);
  var pointer_sample_3 = sampler.tex_pointer + ((c1 | tex_xend) << 2);
  color_0[0] = texture_data[pointer_sample_0 + 0];
  color_0[1] = texture_data[pointer_sample_0 + 1];
  color_0[2] = texture_data[pointer_sample_0 + 2];
  color_1[0] = texture_data[pointer_sample_1 + 0];
  color_1[1] = texture_data[pointer_sample_1 + 1];
  color_1[2] = texture_data[pointer_sample_1 + 2];
  color_2[0] = texture_data[pointer_sample_2 + 0];
  color_2[1] = texture_data[pointer_sample_2 + 1];
  color_2[2] = texture_data[pointer_sample_2 + 2];
  color_3[0] = texture_data[pointer_sample_3 + 0];
  color_3[1] = texture_data[pointer_sample_3 + 1];
  color_3[2] = texture_data[pointer_sample_3 + 2];
  var rs = 1 - s;
  var rt = 1 - t;
  color_4[0] = color_0[0] * rs + color_1[0] * s;
  color_4[1] = color_0[1] * rs + color_1[1] * s;
  color_4[2] = color_0[2] * rs + color_1[2] * s;
  color_5[0] = color_2[0] * rs + color_3[0] * s;
  color_5[1] = color_2[1] * rs + color_3[1] * s;
  color_5[2] = color_2[2] * rs + color_3[2] * s;
  buffer[0] = color_4[0] * rt + color_5[0] * t;
  buffer[1] = color_4[1] * rt + color_5[1] * t;
  buffer[2] = color_4[2] * rt + color_5[2] * t;
}), _Common);
var _default = Common;
exports["default"] = _default;

},{}],4:[function(require,module,exports){
"use strict";

var _common = _interopRequireDefault(require("common"));
var _voxel = _interopRequireDefault(require("assets/textures/voxel.json"));
var _test_room = _interopRequireDefault(require("./scenes/test_room"));
var _matrix = _interopRequireDefault(require("./scenes/matrix"));
var _hallway = _interopRequireDefault(require("./scenes/hallway"));
var _landscape = _interopRequireDefault(require("./scenes/landscape"));
var _space_station = _interopRequireDefault(require("./scenes/space_station"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var scenes = [_test_room["default"], _matrix["default"], _hallway["default"], _landscape["default"], _space_station["default"]];
var Voxels = {
  c$: {},
  width: 800,
  height: 400,
  scale: 1,
  inv_width: 0,
  inv_height: 0,
  prev_timestamp: 0,
  scene: null,
  free_mode: false,
  input: {
    keys: {
      left: false,
      right: false,
      forward: false,
      backward: false,
      up: false,
      down: false,
      turn_left: false,
      turn_right: false
    }
  },
  // Camera initial orientation: x right, y forward, z up
  camera: {
    fov: 50,
    aspect: 1,
    fova: 1,
    key_speed: 1,
    mouse_speed: 1,
    rotation_speed: 10,
    start_position: [0.0, 0.0, 0.0],
    start_rotation: [0, 0, 0],
    position: [0, 0, 0],
    rotation: [0, 0, 0],
    // Screen plane offset from the camera position (y axis)
    // used to generate the world space ray vector.
    f_near: 0,
    sdx: 0,
    sdy: 0,
    voxel: [0, 0, 0],
    offset: [0, 0, 0]
  },
  ray: {
    vector: [1, 0, 0],
    dx: 0,
    dy: 0,
    dz: 0,
    incr_x: 1,
    incr_y: 1,
    incr_z: 1,
    face_x: -1,
    face_y: -1,
    face_z: -1,
    start_tx: 0,
    start_ty: 0,
    start_tz: 0,
    start_voxel: [0, 0, 0]
  },
  base_color: [0, 0, 0],
  clip_count: 32,
  clip_dist: 32,
  one_over_clip_dist: 1,
  buffer: null,
  map: {
    // power of 2 required
    dims: [32, 32, 32],
    shift_z: 10,
    shift_y: 5,
    data: null,
    wrap: [false, false, false]
  },
  intersection: {
    value: -1,
    face: 0,
    t: 0,
    ip: [0, 0, 0]
  },
  // +x, -x, +y, -y, +z, -z
  // Order: left (0), right (1), front (2), back (3), bottom (4), top (5)
  light: [.5, .6, .85, .4, .2, .95],
  light_mult: 1,
  // x (left, right) -> u = y, v = z
  // y (front, back) -> u = x, v = z
  // z (top, bottom) -> u = x, v = y

  texture_sampler: {
    use_blank_color: true,
    background_color: [0, 0, 0],
    default_color: [0, 0, 0],
    packed_color: 0,
    width: 16,
    height: 16,
    stride: 16,
    uv: [[1, 2], [1, 2],
    // left-right
    [0, 2], [0, 2],
    // front-back
    [0, 1], [0, 1] // bottom-top
    ]
  },

  voxel_textures: [null, [0, 0, 0, 0, 0, 0]],
  voxel_objects: [],
  debug: {
    enable: false,
    x: 343,
    y: 335
  }
};
var screen_console = document.getElementById('console');
var screen = document.getElementById('3dbase');
var screen_ctx = screen.getContext('2d');

// ----------------------------------------------------------------------------------
// -- Event listeners.
// ----------------------------------------------------------------------------------

function get_screen_point(event) {
  var rect = screen.getBoundingClientRect();
  var point = [0, 0];
  point[0] = Math.floor(event.clientX - rect.left);
  point[1] = Math.floor(event.clientY - rect.top);
  return point;
}
;
var root = document.getElementById('root');
root.addEventListener('keydown', function (event) {
  if (event.code == 'KeyA') Voxels.input.keys.left = true;else if (event.code == 'KeyD') Voxels.input.keys.right = true;else if (event.code == 'KeyW') Voxels.input.keys.forward = true;else if (event.code == 'KeyS') Voxels.input.keys.backward = true;else if (event.code == 'Space') Voxels.input.keys.up = true;else if (event.code == 'ShiftLeft') Voxels.input.keys.down = true;else if (event.code == 'KeyQ') Voxels.input.keys.turn_left = true;else if (event.code == 'KeyE') Voxels.input.keys.turn_right = true;
});
root.addEventListener('keyup', function (event) {
  if (event.code == 'KeyA') Voxels.input.keys.left = false;else if (event.code == 'KeyD') Voxels.input.keys.right = false;else if (event.code == 'KeyW') Voxels.input.keys.forward = false;else if (event.code == 'KeyS') Voxels.input.keys.backward = false;else if (event.code == 'Space') Voxels.input.keys.up = false;else if (event.code == 'ShiftLeft') Voxels.input.keys.down = false;else if (event.code == 'KeyQ') Voxels.input.keys.turn_left = false;else if (event.code == 'KeyE') Voxels.input.keys.turn_right = false;
});
screen.addEventListener('mousemove', function (event) {
  var point = get_screen_point(event);
});
function process_input() {
  if (!Voxels.free_mode) return;
  var forward = [0, 1, 0];
  var up = [0, 0, 1];
  _common["default"].rotate_x(forward, _common["default"].deg2rad(Voxels.camera.rotation[0]));
  _common["default"].rotate_z(forward, _common["default"].deg2rad(Voxels.camera.rotation[2]));
  var side = _common["default"].vec3_cross(forward, up);

  // Common.vec3_normalize(forward);
  // Common.vec3_normalize(side);

  if (Voxels.input.keys.forward) {
    Voxels.camera.position[0] += Voxels.camera.key_speed * forward[0];
    Voxels.camera.position[1] += Voxels.camera.key_speed * forward[1];
    Voxels.camera.position[2] += Voxels.camera.key_speed * forward[2];
  }
  if (Voxels.input.keys.backward) {
    Voxels.camera.position[0] -= Voxels.camera.key_speed * forward[0];
    Voxels.camera.position[1] -= Voxels.camera.key_speed * forward[1];
    Voxels.camera.position[2] -= Voxels.camera.key_speed * forward[2];
  }
  if (Voxels.input.keys.left) {
    Voxels.camera.position[0] -= Voxels.camera.key_speed * side[0];
    Voxels.camera.position[1] -= Voxels.camera.key_speed * side[1];
    Voxels.camera.position[2] -= Voxels.camera.key_speed * side[2];
  }
  if (Voxels.input.keys.right) {
    Voxels.camera.position[0] += Voxels.camera.key_speed * side[0];
    Voxels.camera.position[1] += Voxels.camera.key_speed * side[1];
    Voxels.camera.position[2] += Voxels.camera.key_speed * side[2];
  }
  if (Voxels.input.keys.up) {
    Voxels.camera.position[2] += Voxels.camera.key_speed;
  }
  if (Voxels.input.keys.down) {
    Voxels.camera.position[2] -= Voxels.camera.key_speed;
  }
  if (Voxels.input.keys.turn_left) {
    Voxels.camera.rotation[2] += Voxels.camera.rotation_speed;
  }
  if (Voxels.input.keys.turn_right) {
    Voxels.camera.rotation[2] -= Voxels.camera.rotation_speed;
  }
}

// ----------------------------------------------------------------------------------
// -- Setup routines.
// ----------------------------------------------------------------------------------

function set_scene(scene) {
  Voxels.scene = scene;
  scene.setup(Voxels);
  if (Voxels.scale > 1) {
    Voxels.width = Voxels.width / Voxels.scale | 0;
    Voxels.height = Voxels.height / Voxels.scale | 0;
    screen.style.transformOrigin = "0 0";
    screen.style.transform = "scale(".concat(Voxels.scale, ")");
  }
  console.log(Voxels.width, Voxels.height);
  screen.width = Voxels.width;
  screen.height = Voxels.height;

  // ----------------------------------------------------------------------------------
  // -- Camera setup.
  // ----------------------------------------------------------------------------------

  Voxels.inv_width = 1.0 / Voxels.width;
  Voxels.inv_height = 1.0 / Voxels.height;
  Voxels.one_over_clip_dist = 1.0 / Voxels.clip_dist;
  Voxels.camera.position[0] = Voxels.camera.start_position[0];
  Voxels.camera.position[1] = Voxels.camera.start_position[1];
  Voxels.camera.position[2] = Voxels.camera.start_position[2];
  Voxels.camera.aspect = Voxels.width / Voxels.height;
  Voxels.camera.one_over_aspect = 1.0 / Voxels.camera.aspect;
  Voxels.camera.sdx = 2.0 / Voxels.width;
  Voxels.camera.sdy = 2.0 / Voxels.height;
  // Voxels.camera.f_near = 1.0 / Math.tan(Common.deg2rad(Voxels.camera.fov * 0.5));
  Voxels.camera.f_near = 1.0;
  Voxels.camera.fova = Math.tan(_common["default"].deg2rad(Voxels.camera.fov * 0.5));

  // ----------------------------------------------------------------------------------
  // -- Screen buffer setup.
  // ----------------------------------------------------------------------------------

  Voxels.buffer = screen_ctx.createImageData(Voxels.width, Voxels.height);
  for (var i = 0; i < Voxels.width * Voxels.height; ++i) {
    Voxels.buffer.data[i * 4 + 0] = 0;
    Voxels.buffer.data[i * 4 + 1] = 0;
    Voxels.buffer.data[i * 4 + 2] = 0;
    Voxels.buffer.data[i * 4 + 3] = 255;
  }

  // ----------------------------------------------------------------------------------
  // -- Map generation.
  // ----------------------------------------------------------------------------------

  generate_objects(Voxels);
  Voxels.map.data = new Array(Voxels.map.dims[0] * Voxels.map.dims[1] * Voxels.map.dims[2]);
  scene.generate(Voxels);
}

// TODO(gabic): Sa scot chestiile astea.
function generate_objects(Voxels) {
  Voxels.c$.OBJ_CUBE = 0;
  Voxels.c$.OBJ_HALL_DECO_0 = 1;
  Voxels.c$.OBJ_HALL_DECO_1 = 2;
  Voxels.c$.OBJ_HALL_DECO_2 = 3;
  Voxels.c$.OBJ_HALL_DECO_3 = 4;
  Voxels.c$.OBJ_HALL_DECO_4 = 5;
  Voxels.c$.OBJ_HALL_DECO_5 = 6;
  Voxels.c$.OBJ_HALL_WINDOW_0 = 7;
  Voxels.c$.OBJ_HALL_WINDOW_1 = 8;
  Voxels.c$.OBJ_HALL_WINDOW_2 = 9;
  Voxels.c$.OBJ_HALL_COLUMN_0 = 10;
  Voxels.c$.OBJ_HALL_COLUMN_1 = 11;

  // ----------------------------------------------------------------------------------

  var obj = {
    name: 'Matrix cube',
    dims: [3, 3, 3],
    center: [1, 1, 1],
    data: []
  };
  var voxel_texture_index = Voxels.voxel_textures.length;

  // Textures.
  // matrix cube base
  var id0 = _common["default"].add_voxel_texture(Voxels, [7, 7, 7, 7, 0, 7]);
  // matrix cube top
  var id1 = _common["default"].add_voxel_texture(Voxels, [8, 8, 8, 8, 7, 7]);
  // matrix cube bottom
  var id2 = _common["default"].add_voxel_texture(Voxels, [9, 9, 9, 9, 7, 7]);

  // Voxels.
  _common["default"].obj_push_data(obj, 0, 0, [id2, id2, id2]);
  _common["default"].obj_push_data(obj, 0, 1, [id0, -1, id0]);
  _common["default"].obj_push_data(obj, 0, 2, [id1, id1, id1]);
  _common["default"].obj_push_data(obj, 1, 0, [id2, -1, id2]);
  _common["default"].obj_push_data(obj, 1, 1, [-1, -1, -1]);
  _common["default"].obj_push_data(obj, 1, 2, [id1, -1, id1]);
  _common["default"].obj_push_data(obj, 2, 0, [id2, id2, id2]);
  _common["default"].obj_push_data(obj, 2, 1, [id0, -1, id0]);
  _common["default"].obj_push_data(obj, 2, 2, [id1, id1, id1]);
  Voxels.voxel_objects.push(obj);

  // ----------------------------------------------------------------------------------

  obj = {
    name: 'Hall decoration 0',
    dims: [6, 1, 15],
    center: [0, 0, 0],
    data: []
  };

  // Textures.
  // Voxels.
  _common["default"].obj_push_data(obj, 0, 0, [0, -1, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 1, [0, -1, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 2, [0, -1, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 3, [0, 0, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 4, [0, 0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 5, [0, -1, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 6, [0, -1, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 7, [0, -1, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 8, [0, -1, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 9, [0, -1, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 10, [0, 0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 11, [-1, 0, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 12, [-1, -1, 0, 0, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 13, [-1, 0, -1, 0, 0, -1]);
  _common["default"].obj_push_data(obj, 0, 14, [0, -1, -1, -1, 0, 0]);
  Voxels.voxel_objects.push(obj);

  // ----------------------------------------------------------------------------------

  obj = {
    name: 'Hall decoration 1',
    dims: [5, 1, 15],
    center: [0, 0, 0],
    data: []
  };

  // Textures.
  // Voxels.
  _common["default"].obj_push_data(obj, 0, 0, [0, 0, 0, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 1, [0, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 2, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 3, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 4, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 5, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 6, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 7, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 8, [0, -1, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 9, [0, 0, -1, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 10, [0, 0, 0, -1, -1]);
  _common["default"].obj_push_data(obj, 0, 11, [0, -1, 0, 0, -1]);
  _common["default"].obj_push_data(obj, 0, 12, [0, -1, -1, 0, 0]);
  _common["default"].obj_push_data(obj, 0, 13, [0, 0, -1, -1, 0]);
  _common["default"].obj_push_data(obj, 0, 14, [0, 0, 0, 0, 0]);
  Voxels.voxel_objects.push(obj);
}
function valid_voxel(x, y, z) {
  return x >= 0 && x < Voxels.map.dims[0] && y >= 0 && y < Voxels.map.dims[1] && z >= 0 && z < Voxels.map.dims[2];
}
function wrap_coord_v3(v) {
  if (Voxels.map.wrap[0]) v[0] = v[0] < 0 ? Voxels.map.dims[0] + v[0] : v[0] % Voxels.map.dims[0];
  if (Voxels.map.wrap[1]) v[1] = v[1] < 0 ? Voxels.map.dims[1] + v[1] : v[1] % Voxels.map.dims[1];
  if (Voxels.map.wrap[2]) v[2] = v[2] < 0 ? Voxels.map.dims[2] + v[2] : v[2] % Voxels.map.dims[2];
}
function wrap_coord_x(x) {
  if (Voxels.map.wrap[0]) x = x < 0 ? Voxels.map.dims[0] + x : x % Voxels.map.dims[0];
  return x;
}
function wrap_coord_y(y) {
  if (Voxels.map.wrap[1]) y = y < 0 ? Voxels.map.dims[1] + y : y % Voxels.map.dims[1];
  return y;
}
function wrap_coord_z(z) {
  if (Voxels.map.wrap[2]) z = z < 0 ? Voxels.map.dims[2] + z : z % Voxels.map.dims[2];
  return z;
}
function init_camera() {
  wrap_coord_v3(Voxels.camera.position);
  Voxels.camera.voxel[0] = Voxels.camera.position[0] | 0;
  Voxels.camera.voxel[1] = Voxels.camera.position[1] | 0;
  Voxels.camera.voxel[2] = Voxels.camera.position[2] | 0;
  if (Voxels.camera.voxel[0] < 0) Voxels.camera.voxel[0]--;
  if (Voxels.camera.voxel[1] < 0) Voxels.camera.voxel[1]--;
  if (Voxels.camera.voxel[2] < 0) Voxels.camera.voxel[2]--;
  Voxels.camera.offset[0] = Voxels.camera.position[0] - Voxels.camera.voxel[0];
  Voxels.camera.offset[1] = Voxels.camera.position[1] - Voxels.camera.voxel[1];
  Voxels.camera.offset[2] = Voxels.camera.position[2] - Voxels.camera.voxel[2];
}
function ray_setup() {
  Voxels.ray.start_voxel[0] = Voxels.camera.voxel[0];
  Voxels.ray.start_voxel[1] = Voxels.camera.voxel[1];
  Voxels.ray.start_voxel[2] = Voxels.camera.voxel[2];
  Voxels.ray.dx = 1.0 / Voxels.ray.vector[0];
  Voxels.ray.dy = 1.0 / Voxels.ray.vector[1];
  Voxels.ray.dz = 1.0 / Voxels.ray.vector[2];
  Voxels.ray.dx = Voxels.ray.dx < 0 ? -Voxels.ray.dx : Voxels.ray.dx;
  Voxels.ray.dy = Voxels.ray.dy < 0 ? -Voxels.ray.dy : Voxels.ray.dy;
  Voxels.ray.dz = Voxels.ray.dz < 0 ? -Voxels.ray.dz : Voxels.ray.dz;
  Voxels.ray.face_x = 0;
  Voxels.ray.face_y = 2;
  Voxels.ray.face_z = 4;
  Voxels.ray.incr_x = 1;
  Voxels.ray.incr_y = 1;
  Voxels.ray.incr_z = 1;
  var offset_x = Voxels.camera.offset[0];
  var offset_y = Voxels.camera.offset[1];
  var offset_z = Voxels.camera.offset[2];
  if (Voxels.ray.vector[0] < 0) {
    Voxels.ray.incr_x = -1;
    Voxels.ray.face_x = 1;
    if (offset_x == 0) {
      offset_x = 1;
      Voxels.ray.start_voxel[0]--;
    }
  } else offset_x = 1 - offset_x;
  if (Voxels.ray.vector[1] < 0) {
    Voxels.ray.incr_y = -1;
    Voxels.ray.face_y = 3;
    if (offset_y == 0) {
      offset_y = 1;
      Voxels.ray.start_voxel[1]--;
    }
  } else offset_y = 1 - offset_y;
  if (Voxels.ray.vector[2] < 0) {
    Voxels.ray.incr_z = -1;
    Voxels.ray.face_z = 5;
    if (offset_z == 0) {
      offset_z = 1;
      Voxels.ray.start_voxel[2]--;
    }
  } else offset_z = 1 - offset_z;
  Voxels.ray.start_tx = Voxels.ray.dx * offset_x;
  Voxels.ray.start_ty = Voxels.ray.dy * offset_y;
  Voxels.ray.start_tz = Voxels.ray.dz * offset_z;
  if (Voxels.ray.vector[0] == 0) Voxels.ray.start_tx = Infinity;
  if (Voxels.ray.vector[1] == 0) Voxels.ray.start_ty = Infinity;
  if (Voxels.ray.vector[2] == 0) Voxels.ray.start_tz = Infinity;
}
function render(timestamp) {
  var delta = timestamp - Voxels.prev_timestamp;
  Voxels.prev_timestamp = timestamp;
  var t0 = performance.now();
  if (Voxels.scene) {
    var world_point = [0, 0, 0];
    var pixel_index = 0;
    var dy = 0;
    Voxels.scene.update(Voxels, timestamp, delta);
    process_input();
    init_camera();

    // ----------------------------------------------------------------------------------
    // -- Rasterization
    // ----------------------------------------------------------------------------------
    // Cast a ray through every pixel on the screen.
    // ----------------------------------------------------------------------------------

    for (var y = 0; y < Voxels.height; ++y) {
      var dx = 0;
      for (var x = 0; x < Voxels.width; ++x) {
        Voxels.buffer.data[pixel_index + 0] = Voxels.texture_sampler.background_color[0];
        Voxels.buffer.data[pixel_index + 1] = Voxels.texture_sampler.background_color[1];
        Voxels.buffer.data[pixel_index + 2] = Voxels.texture_sampler.background_color[2];
        Voxels.ray.vector[0] = Voxels.camera.fova * Voxels.camera.aspect * (dx - 1);
        Voxels.ray.vector[1] = Voxels.camera.f_near;
        Voxels.ray.vector[2] = (1 - dy) * Voxels.camera.fova;
        _common["default"].rotate_x(Voxels.ray.vector, _common["default"].deg2rad(Voxels.camera.rotation[0]));
        _common["default"].rotate_z(Voxels.ray.vector, _common["default"].deg2rad(Voxels.camera.rotation[2]));
        ray_setup();

        // ----------------------------------------------------------------------------------
        // -- Ray traversal.
        // ----------------------------------------------------------------------------------

        var vx = Voxels.ray.start_voxel[0];
        var vy = Voxels.ray.start_voxel[1];
        var vz = Voxels.ray.start_voxel[2];
        var tx = Voxels.ray.start_tx;
        var ty = Voxels.ray.start_ty;
        var tz = Voxels.ray.start_tz;
        var face = tx < ty ? Voxels.ray.face_x : Voxels.ray.face_y;
        var count = 0;
        var t = 0;
        var voxel_index = -1;
        Voxels.intersection.value = -1;
        while (true) {
          count++;
          if (count >= Voxels.clip_count) break;
          if (tx < ty) {
            if (tx < tz) {
              t = tx;
              tx += Voxels.ray.dx;
              vx += Voxels.ray.incr_x;
              face = Voxels.ray.face_x;
            } else {
              t = tz;
              tz += Voxels.ray.dz;
              vz += Voxels.ray.incr_z;
              face = Voxels.ray.face_z;
            }
          } else {
            if (ty < tz) {
              t = ty;
              ty += Voxels.ray.dy;
              vy += Voxels.ray.incr_y;
              face = Voxels.ray.face_y;
            } else {
              t = tz;
              tz += Voxels.ray.dz;
              vz += Voxels.ray.incr_z;
              face = Voxels.ray.face_z;
            }
          }
          if (t >= Voxels.clip_dist) break;
          vx = wrap_coord_x(vx);
          vy = wrap_coord_y(vy);
          vz = wrap_coord_z(vz);
          voxel_index = vz << Voxels.map.shift_z | vy << Voxels.map.shift_y | vx;
          if (valid_voxel(vx, vy, vz) && Voxels.map.data[voxel_index] > 0) {
            Voxels.intersection.value = Voxels.map.data[voxel_index];
            Voxels.intersection.face = face;
            Voxels.intersection.t = t;
            Voxels.intersection.ip[0] = Voxels.camera.position[0] + Voxels.intersection.t * Voxels.ray.vector[0];
            Voxels.intersection.ip[1] = Voxels.camera.position[1] + Voxels.intersection.t * Voxels.ray.vector[1];
            Voxels.intersection.ip[2] = Voxels.camera.position[2] + Voxels.intersection.t * Voxels.ray.vector[2];
            break;
          }
        }

        // ----------------------------------------------------------------------------------
        // -- Pixel color determination.
        // ----------------------------------------------------------------------------------

        if (Voxels.intersection.value > 0) {
          var out_r = Voxels.texture_sampler.default_color[0];
          var out_g = Voxels.texture_sampler.default_color[1];
          var out_b = Voxels.texture_sampler.default_color[2];
          var out_a = 255;

          // Texture sampling.
          if (!Voxels.texture_sampler.use_blank_color) {
            // Custom color.
            if (Voxels.intersection.value & 0xff000000) {
              out_r = (Voxels.intersection.value & 0x00ff0000) >> 16;
              out_g = (Voxels.intersection.value & 0x0000ff00) >> 8;
              out_b = Voxels.intersection.value & 0x000000ff;
            }
            // Texture.
            else {
              var sampler = Voxels.texture_sampler.uv[Voxels.intersection.face];
              var u = Voxels.intersection.ip[sampler[0]] - (Voxels.intersection.ip[sampler[0]] | 0);
              var v = Voxels.intersection.ip[sampler[1]] - (Voxels.intersection.ip[sampler[1]] | 0);
              u = u < 0 ? 1 + u : u;
              v = v < 0 ? -v : 1 - v;
              u = u == 1 ? 0.999999 : u;
              v = v == 1 ? 0.999999 : v;
              var tex_x = u * Voxels.texture_sampler.width | 0;
              var tex_y = v * Voxels.texture_sampler.height | 0;
              // var tex_index = (tex_y * Voxels.texture_sampler.stride + tex_x) << 2;
              var tex_index = (tex_y << 4 | tex_x) << 2;
              var offset = Voxels.voxel_textures[Voxels.intersection.value][Voxels.intersection.face];
              var face_pointer = _voxel["default"].offset[offset] + tex_index;
              out_r = _voxel["default"].data[face_pointer + 0];
              out_g = _voxel["default"].data[face_pointer + 1];
              out_b = _voxel["default"].data[face_pointer + 2];
              out_a = _voxel["default"].data[face_pointer + 3];
            }
          }
          if (out_a == 255) {
            // TODO(gabic): Cazul pentru textura de debug.
            var t = 1 - Voxels.intersection.t * Voxels.one_over_clip_dist;
            t *= Voxels.light[Voxels.intersection.face] * Voxels.light_mult;
            Voxels.buffer.data[pixel_index + 0] = out_r * t | 0;
            Voxels.buffer.data[pixel_index + 1] = out_g * t | 0;
            Voxels.buffer.data[pixel_index + 2] = out_b * t | 0;
          }
        }
        dx += Voxels.camera.sdx;
        pixel_index += 4;
      }
      dy += Voxels.camera.sdy;
    }
  }
  var t1 = performance.now();
  var frame_ms = t1 - t0;
  var fps = 1000 / frame_ms;
  var name = Voxels.scene ? Voxels.scene.name : 'Unknown';
  var resolution = Voxels.width + 'x' + Voxels.height + ' (x' + Voxels.scale + ')';
  var console_html = '&raquo;&nbsp; ' + name + ' / ' + 'resolution: ' + resolution + ' / ms: ' + frame_ms.toFixed(2);
  console_html += ' / ' + 'fps: ' + fps.toFixed(2);
  screen_console.innerHTML = console_html;
  if (Voxels.buffer) screen_ctx.putImageData(Voxels.buffer, 0, 0);
  window.requestAnimationFrame(render);
}

// -----------------------------------------------------------
// -- UI events.
// -----------------------------------------------------------

$("#voxels-panel").on("click", "#back-to-menu-button", function (e) {
  window.location.href = "../index.html";
});
$("#voxels-panel").on("change", "#scene-select", function (e) {
  var $target = $(e.target);
  var scene_index = parseInt($target.val());
  if (scene_index < 0 || scene_index >= scenes.length) scene_index = 0;
  set_scene(scenes[scene_index]);
});
window.requestAnimationFrame(render);

},{"./scenes/hallway":5,"./scenes/landscape":6,"./scenes/matrix":7,"./scenes/space_station":8,"./scenes/test_room":9,"assets/textures/voxel.json":1,"common":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _common = _interopRequireDefault(require("common"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var Hallway = {
  name: "Hallway",
  data: {
    textures: {}
  },
  xd: _common["default"].TWO_PI / 5000,
  zd: _common["default"].TWO_PI / 800,
  rot_x: _common["default"].TWO_PI / 20000,
  rot_z: _common["default"].TWO_PI / 10000,
  running: true,
  camera_circle_rotation: {
    radius: 0.3,
    center_distance: 1,
    point_distance: 0,
    speed: _common["default"].TWO_PI / 10000
  },
  setup: function setup(Voxels) {
    Voxels.width = 800;
    Voxels.height = 400;
    Voxels.scale = 2;
    Voxels.map.dims = [32, 32, 32];
    Voxels.map.shift_z = 10;
    Voxels.map.shift_y = 5;
    Voxels.camera.start_position = [15.5, 0, 5];
    Voxels.camera.start_rotation = [0, 0, 0];

    // Voxels.camera.rotation[0] = 35;
    // Voxels.camera.rotation[2] = 90;

    Voxels.map.wrap = [false, true, false];
    Voxels.texture_sampler.use_blank_color = false;
    Voxels.texture_sampler.default_color = [150, 150, 150];
    Voxels.clip_count = 128;
    Voxels.clip_dist = 80;
    Voxels.light = [.6, .6, .85, .45, .3, .95], Voxels.light_mult = 1.5;
    this.camera_circle_rotation.point_distance = Math.sqrt(this.camera_circle_rotation.radius * this.camera_circle_rotation.radius + this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance);
  },
  add_window: function add_window(map, point) {
    _common["default"].brush(map, point, [point[0], point[1] + 2, point[2] + 2], 0);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2] + 3], [point[0], point[1] + 1, point[2] + 3], 0);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2] - 1], [point[0], point[1] + 1, point[2] - 1], 0);
    _common["default"].brush(map, [point[0], point[1], point[2] + 1], [point[0], point[1] + 2, point[2] + 1], Hallway.data.textures.floor_tile_0);
  },
  add_column_left: function add_column_left(map, point) {
    var end_point = [point[0] + 4, point[1] + 3, point[2] + 10];
    _common["default"].brush(map, point, end_point, Hallway.data.textures.bricks_1);
    _common["default"].brush(map, [point[0] + 2, point[1] + 0, point[2] + 0], [point[0] + 2, point[1] + 0, point[2] + 6], 0);
    _common["default"].brush(map, [point[0] + 2, point[1] + 3, point[2] + 0], [point[0] + 2, point[1] + 3, point[2] + 6], 0);
    _common["default"].brush(map, [point[0] + 2, point[1] + 1, point[2] + 6], [point[0] + 2, point[1] + 2, point[2] + 6], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] + 2, point[1] + 1, point[2] + 4], [point[0] + 2, point[1] + 2, point[2] + 4], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] + 2, point[1] + 1, point[2] + 2], [point[0] + 2, point[1] + 2, point[2] + 2], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] + 4, point[1] + 0, point[2] + 0], [point[0] + 4, point[1] + 0, point[2] + 10], 0);
    _common["default"].brush(map, [point[0] + 4, point[1] + 3, point[2] + 0], [point[0] + 4, point[1] + 3, point[2] + 10], 0);
    _common["default"].brush(map, point, [point[0] + 4, point[1] + 3, point[2]], Hallway.data.textures.bricks_1_bottom, true);
    _common["default"].brush(map, [point[0], point[1], point[2] + 8], [point[0] + 4, point[1] + 3, point[2] + 8], Hallway.data.textures.bricks_1_top, true);
  },
  add_column_right: function add_column_right(map, point) {
    var end_point = [point[0] - 4, point[1] + 3, point[2] + 10];
    _common["default"].brush(map, point, end_point, Hallway.data.textures.bricks_1);
    _common["default"].brush(map, [point[0] - 2, point[1] + 0, point[2] + 0], [point[0] - 2, point[1] + 0, point[2] + 6], 0);
    _common["default"].brush(map, [point[0] - 2, point[1] + 3, point[2] + 0], [point[0] - 2, point[1] + 3, point[2] + 6], 0);
    _common["default"].brush(map, [point[0] - 2, point[1] + 1, point[2] + 6], [point[0] - 2, point[1] + 2, point[2] + 6], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] - 2, point[1] + 1, point[2] + 4], [point[0] - 2, point[1] + 2, point[2] + 4], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] - 2, point[1] + 1, point[2] + 2], [point[0] - 2, point[1] + 2, point[2] + 2], Hallway.data.textures.light_0);
    _common["default"].brush(map, [point[0] - 4, point[1] + 0, point[2] + 0], [point[0] - 4, point[1] + 0, point[2] + 10], 0);
    _common["default"].brush(map, [point[0] - 4, point[1] + 3, point[2] + 0], [point[0] - 4, point[1] + 3, point[2] + 10], 0);
    _common["default"].brush(map, [point[0] - 4, point[1], point[2]], [point[0], point[1] + 3, point[2]], Hallway.data.textures.bricks_1_bottom, true);
    _common["default"].brush(map, [point[0] - 4, point[1], point[2] + 8], [point[0], point[1] + 3, point[2] + 8], Hallway.data.textures.bricks_1_top, true);
  },
  add_support: function add_support(map, point) {
    _common["default"].brush(map, [point[0], point[1], point[2]], [point[0] + 16, point[1] + 1, point[2]], Hallway.data.textures.metal_0);
    _common["default"].brush(map, [point[0] + 8 - 1, point[1] - 1, point[2]], [point[0] + 8 + 1, point[1] + 2, point[2]], Hallway.data.textures.deco_3);
  },
  generate: function generate(Voxels) {
    _common["default"].clear_map(Voxels.map);
    var bricks_0 = _common["default"].add_voxel_texture(Voxels, 10);
    var bricks_1 = _common["default"].add_voxel_texture(Voxels, 11);
    var floor_tile_0 = _common["default"].add_voxel_texture(Voxels, 12);
    var floor_tile_1 = _common["default"].add_voxel_texture(Voxels, 13);
    var floor_tile_2 = _common["default"].add_voxel_texture(Voxels, 14);
    var bricks_1_bottom = _common["default"].add_voxel_texture(Voxels, 15);
    var bricks_1_top = _common["default"].add_voxel_texture(Voxels, 16);
    var deco_0 = _common["default"].add_voxel_texture(Voxels, 17);
    var light_0 = _common["default"].add_voxel_texture(Voxels, 18);
    var light_1 = _common["default"].add_voxel_texture(Voxels, 20);
    var deco_1 = _common["default"].add_voxel_texture(Voxels, [19, 19, 19, 19, 20, 20]);
    var deco_2 = _common["default"].add_voxel_texture(Voxels, 21);
    var deco_3 = _common["default"].add_voxel_texture(Voxels, [23, 23, 23, 23, 20, 20]);
    var metal_0 = _common["default"].add_voxel_texture(Voxels, 22);
    var metal_1 = _common["default"].add_voxel_texture(Voxels, 23);
    var deco_4 = _common["default"].add_voxel_texture(Voxels, [23, 23, 23, 23, 18, 18]);
    Hallway.data.textures.bricks_0 = bricks_0;
    Hallway.data.textures.bricks_1 = bricks_1;
    Hallway.data.textures.floor_tile_0 = floor_tile_0;
    Hallway.data.textures.floor_tile_1 = floor_tile_1;
    Hallway.data.textures.floor_tile_2 = floor_tile_2;
    Hallway.data.textures.bricks_1_bottom = bricks_1_bottom;
    Hallway.data.textures.bricks_1_top = bricks_1_top;
    Hallway.data.textures.deco_0 = deco_0;
    Hallway.data.textures.light_0 = light_0;
    Hallway.data.textures.light_1 = light_1;
    Hallway.data.textures.deco_1 = deco_1;
    Hallway.data.textures.deco_2 = deco_2;
    Hallway.data.textures.deco_3 = deco_3;
    Hallway.data.textures.metal_0 = metal_0;
    Hallway.data.textures.metal_1 = metal_1;

    // 15 = center
    // Floor.
    _common["default"].brush(Voxels.map, [7, 0, 0], [23, 32, 2], floor_tile_2);
    _common["default"].brush(Voxels.map, [7, 0, 3], [7, 32, 3], bricks_1);
    _common["default"].brush(Voxels.map, [23, 0, 3], [23, 32, 3], bricks_1);
    _common["default"].brush(Voxels.map, [12, 0, 2], [12, 32, 2], floor_tile_1, true);
    // Common.brush(Voxels.map, [15, 0, 2], [15, 32, 2], floor_tile_1, true);
    _common["default"].brush(Voxels.map, [18, 0, 2], [18, 32, 2], floor_tile_1, true);
    _common["default"].brush(Voxels.map, [13, 0, 2], [17, 32, 2], 0);
    _common["default"].brush(Voxels.map, [14, 0, 1], [16, 31, 1], 0x01422433);
    for (var i = 0; i < 32; ++i) {
      if (i % 8 == 0)
        // Common.brush(Voxels.map, [15, i, 1], [15, i, 1], 0x0176D834);
        _common["default"].brush(Voxels.map, [15, i, 1], [15, i, 1], light_0);
    }
    _common["default"].brush(Voxels.map, [5, 0, 0], [5, 32, 12], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [25, 0, 0], [25, 32, 12], 0x01BA2E2E);

    // Left wall.
    _common["default"].brush(Voxels.map, [6, 0, 0], [6, 32, 12], bricks_1);
    _common["default"].brush(Voxels.map, [6, 0, 11], [6, 32, 11], bricks_1_top, true);

    // Right wall.
    _common["default"].brush(Voxels.map, [24, 0, 0], [24, 32, 12], bricks_1);
    _common["default"].brush(Voxels.map, [24, 0, 11], [24, 32, 11], bricks_1_top, true);
    _common["default"].brush(Voxels.map, [6, 15, 7], [6, 15, 7], light_1);
    _common["default"].brush(Voxels.map, [24, 15, 7], [24, 15, 7], light_1);

    // ----------------------------------------------------------------------------------

    // Decoration 1.
    _common["default"].brush(Voxels.map, [7, 14, 3], [8, 16, 4], metal_0);
    _common["default"].brush(Voxels.map, [8, 15, 3], [8, 15, 3], 0);
    _common["default"].brush(Voxels.map, [8, 13, 2], [8, 13, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [9, 13, 2], [9, 13, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [9, 14, 2], [9, 14, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [9, 15, 2], [9, 15, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [9, 16, 2], [9, 16, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [9, 17, 2], [9, 17, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [8, 17, 2], [8, 17, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [8, 15, 2], [8, 15, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [7, 15, 3], [7, 15, 3], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [8, 12, 2], [8, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [9, 12, 2], [9, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 12, 2], [10, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 13, 2], [10, 13, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 14, 2], [10, 14, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 15, 2], [10, 15, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 16, 2], [10, 16, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 17, 2], [10, 17, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [10, 18, 2], [10, 18, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [9, 18, 2], [9, 18, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [8, 18, 2], [8, 18, 2], floor_tile_1);

    // ----------------------------------------------------------------------------------

    // Decoration 2.
    _common["default"].brush(Voxels.map, [22, 14, 3], [23, 16, 4], metal_0);
    _common["default"].brush(Voxels.map, [22, 15, 3], [22, 15, 3], 0);
    _common["default"].brush(Voxels.map, [22, 13, 2], [22, 13, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [21, 13, 2], [21, 13, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [21, 14, 2], [21, 14, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [21, 15, 2], [21, 15, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [21, 16, 2], [21, 16, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [21, 17, 2], [21, 17, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [22, 17, 2], [22, 17, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [22, 15, 2], [22, 15, 2], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [23, 15, 3], [23, 15, 3], 0x01BA2E2E);
    _common["default"].brush(Voxels.map, [22, 12, 2], [22, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [21, 12, 2], [21, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 12, 2], [20, 12, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 13, 2], [20, 13, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 14, 2], [20, 14, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 15, 2], [20, 15, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 16, 2], [20, 16, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 17, 2], [20, 17, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [20, 18, 2], [20, 18, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [21, 18, 2], [21, 18, 2], floor_tile_1);
    _common["default"].brush(Voxels.map, [22, 18, 2], [22, 18, 2], floor_tile_1);

    // ----------------------------------------------------------------------------------

    // Ceiling.
    _common["default"].brush(Voxels.map, [7, 0, 12], [23, 32, 20], floor_tile_2);

    // Ceiling center.
    _common["default"].brush(Voxels.map, [10, 0, 12], [20, 32, 13], 0);
    _common["default"].brush(Voxels.map, [14, 0, 14], [16, 32, 18], 0);
    _common["default"].brush(Voxels.map, [14, 0, 17], [16, 32, 17], 0x01BA2E2E);
    for (var i = 0; i < 32; ++i) {
      if (i % 8 == 0) {
        _common["default"].brush(Voxels.map, [13, i, 14], [13, i + 4, 14], deco_4);
        _common["default"].brush(Voxels.map, [17, i, 14], [17, i + 4, 14], deco_4);
      }
    }
    for (var i = 0; i < 32; ++i) {
      if (i % 6 == 0) _common["default"].brush(Voxels.map, [14, i, 15], [16, i + 2, 15], metal_0);
    }
    _common["default"].brush(Voxels.map, [9, 0, 12], [9, 32, 12], 0);
    _common["default"].brush(Voxels.map, [21, 0, 12], [21, 32, 12], 0);
    Hallway.add_support(Voxels.map, [7, 14, 13]);
    Hallway.add_support(Voxels.map, [7, 29, 13]);
    _common["default"].brush(Voxels.map, [9, 0, 13], [9, 32, 13], metal_0, true);
    _common["default"].brush(Voxels.map, [21, 0, 13], [21, 32, 13], metal_0, true);
    _common["default"].brush(Voxels.map, [7, 0, 12], [8, 32, 12], bricks_1, true);
    _common["default"].brush(Voxels.map, [23, 0, 12], [22, 32, 12], bricks_1, true);
    Hallway.add_column_left(Voxels.map, [7, 3, 3]);
    Hallway.add_column_right(Voxels.map, [23, 3, 3]);
    Hallway.add_window(Voxels.map, [6, 11, 6]);
    Hallway.add_window(Voxels.map, [24, 11, 6]);
    Hallway.add_window(Voxels.map, [6, 17, 6]);
    Hallway.add_window(Voxels.map, [24, 17, 6]);
    Hallway.add_column_left(Voxels.map, [7, 24, 3]);
    Hallway.add_column_right(Voxels.map, [23, 24, 3]);
    _common["default"].brush(Voxels.map, [9, 31, 3], [10, 31, 3], deco_1);
    _common["default"].brush(Voxels.map, [20, 31, 3], [21, 31, 3], deco_1);
  },
  update: function update(Voxels, timestamp, delta) {
    // Voxels.camera.rotation[2] = 90;

    if (!Voxels.free_mode && Hallway.running) {
      var xd = timestamp * Hallway.xd;
      var zd = timestamp * Hallway.zd;
      var rot_x = timestamp * Hallway.rot_x;
      var rot_z = timestamp * Hallway.rot_z;

      // Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);
      // Voxels.camera.position[1] += delta * 0.005;
      Voxels.camera.position[1] += delta * 0.012;
      // Voxels.camera.position[2] -= delta * 0.001;
      Voxels.camera.position[2] = Voxels.camera.start_position[2] + 0.5 * Math.sin(zd);

      // var angles = Common.get_camera_circle_rotation_angles(timestamp * this.camera_circle_rotation.speed, this.camera_circle_rotation);
      // Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + Common.rad2deg(angles[0]);
      // Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] - Common.rad2deg(angles[1]);

      Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 20 * Math.sin(rot_x);
      Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 60 * Math.sin(rot_z);
    }
  }
};
var _default = Hallway;
exports["default"] = _default;

},{"common":3}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _common = _interopRequireDefault(require("common"));
var _simplexNoise = require("simplex-noise");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var VoxelLandscape = {
  name: "Landscape",
  data: {
    c0: _common["default"].TWO_PI / 10000,
    c1: _common["default"].TWO_PI / 20000
  },
  setup: function setup(Voxels) {
    Voxels.width = 600;
    Voxels.height = 300;
    Voxels.scale = 2;
    Voxels.clip_count = 128;
    Voxels.clip_dist = 64;
    Voxels.light = [.5, .7, .85, .3, .2, .95];

    // Voxels.camera.start_position = [64.0, 0.0, 16.0];
    Voxels.camera.start_position = [32.0, -10.0, 16.0];
    Voxels.camera.start_rotation = [-20, 0, -45];
    Voxels.texture_sampler.use_blank_color = true;
    Voxels.texture_sampler.default_color = [114, 188, 112, 255];
    Voxels.map.dims = [64, 64, 32];
    Voxels.map.shift_z = 12;
    Voxels.map.shift_y = 6;
    Voxels.map.wrap = [true, true, false];
  },
  attenuation: function attenuation(v) {
    var s = 0.9;
    return s * Math.sin(0.5 * Math.PI * v + Math.PI * 0.5) + (1 - s);
  },
  generate: function generate(Voxels) {
    var noise2D = (0, _simplexNoise.createNoise2D)();
    for (var z = 0; z < Voxels.map.dims[2]; ++z) {
      for (var y = 0; y < Voxels.map.dims[1]; ++y) {
        for (var x = 0; x < Voxels.map.dims[0]; ++x) {
          Voxels.map.data[_common["default"].get_map_index(Voxels.map, x, y, z)] = -1;
        }
      }
    }
    var freq = 0.9;
    for (var y = 0; y < Voxels.map.dims[1]; ++y) {
      for (var x = 0; x < Voxels.map.dims[0]; ++x) {
        var nx = 2 * x / Voxels.map.dims[0] - 1;
        var ny = 2 * y / Voxels.map.dims[1] - 1;
        var nz = noise2D(freq * nx, freq * ny);
        var ax = VoxelLandscape.attenuation(nx);
        var ay = VoxelLandscape.attenuation(ny);
        nz = 0.5 * nz + 0.5;
        nz *= (ax < ay ? ax : ay) * 0.5;
        // nz = 0.4 * Math.pow(nz, 0.6);

        var z = nz * (Voxels.map.dims[2] - 1) | 0;
        for (var zi = 0; zi <= z; ++zi) {
          Voxels.map.data[_common["default"].get_map_index(Voxels.map, x, y, zi)] = 1;
        }
      }
    }
  },
  update: function update(Voxels, timestamp, delta) {
    var zd = timestamp * VoxelLandscape.data.c0;
    var rot_x = timestamp * VoxelLandscape.data.c0;
    var rot_z = timestamp * VoxelLandscape.data.c1;
    Voxels.camera.position[0] += delta * 0.01;
    Voxels.camera.position[1] += delta * 0.01;
    Voxels.camera.position[2] = Voxels.camera.start_position[2] + 2.0 * Math.sin(zd);
    Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 5 * Math.sin(rot_x);
    Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 80 * Math.sin(rot_z);
  }
};
var _default = VoxelLandscape;
exports["default"] = _default;

},{"common":3,"simplex-noise":2}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _common = _interopRequireDefault(require("common"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var Matrix = {
  name: "Matrix",
  data: {},
  voxel_texture_index: 0,
  running: true,
  vtindex: function vtindex(offset) {
    return this.voxel_texture_index + offset;
  },
  camera_circle_rotation: {
    radius: 0.5,
    center_distance: 1,
    point_distance: 0,
    speed: _common["default"].TWO_PI / 10000
  },
  setup: function setup(Voxels) {
    Voxels.width = 800;
    Voxels.height = 400;
    Voxels.scale = 2;
    Voxels.clip_count = 64;
    Voxels.clip_dist = 32;
    Voxels.map.dims = [4, 4, 4];
    Voxels.map.shift_z = 4;
    Voxels.map.shift_y = 2;
    Voxels.camera.start_position = [0.5, 0, 3.5];

    // Voxels.map.dims = [8, 8, 8];
    // Voxels.map.shift_z = 6;
    // Voxels.map.shift_y = 3;
    // Voxels.camera.start_position = [-1.5, 0, 3.5];

    // Voxels.camera.start_rotation = [0, 0, -90.0];
    Voxels.map.wrap = [true, true, true];
    Voxels.texture_sampler.use_blank_color = false;
    this.camera_circle_rotation.point_distance = Math.sqrt(this.camera_circle_rotation.radius * this.camera_circle_rotation.radius + this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance);

    // Textures.
    this.voxel_texture_index = Voxels.voxel_textures.length;
    Voxels.voxel_textures.push([3, 3, 3, 3, 6, 6]);
    Voxels.voxel_textures.push([1, 1, 1, 1, 6, 6]);
    Voxels.voxel_textures.push([2, 2, 2, 2, 2, 2]);
    Voxels.voxel_textures.push([4, 4, 4, 4, 4, 4]);
    Voxels.voxel_textures.push([5, 5, 5, 5, 5, 5]);
  },
  generate: function generate(Voxels) {
    for (var z = 0; z < Voxels.map.dims[2]; ++z) {
      for (var y = 0; y < Voxels.map.dims[1]; ++y) {
        for (var x = 0; x < Voxels.map.dims[0]; ++x) {
          Voxels.map.data[_common["default"].get_map_index(Voxels.map, x, y, z)] = -1;
        }
      }
    }
    _common["default"].map_add_object(Voxels.map, [2, 2, 1], Voxels.voxel_objects[Voxels.c$.OBJ_CUBE]);
  },
  update: function update(Voxels, timestamp, delta) {
    if (!Voxels.free_mode && Matrix.running) {
      var xd = timestamp * _common["default"].TWO_PI / 5000;
      var zd = timestamp * _common["default"].TWO_PI / 10000;

      // Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);

      Voxels.camera.position[1] += delta * 0.005;
      Voxels.camera.position[2] -= delta * 0.001;

      // Voxels.camera.position[2] = Voxels.camera.start_position[2] + 5.0 * Math.sin(zd);

      var angles = _common["default"].get_camera_circle_rotation_angles(timestamp * this.camera_circle_rotation.speed, this.camera_circle_rotation);
      Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + _common["default"].rad2deg(angles[0]);
      Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] - _common["default"].rad2deg(angles[1]);
    }
  }
};
var _default = Matrix;
exports["default"] = _default;

},{"common":3}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _common = _interopRequireDefault(require("common"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var SpaceStation = {
  name: "SpaceStation",
  data: {
    textures: {}
  },
  xd: _common["default"].TWO_PI / 8000,
  zd: _common["default"].TWO_PI / 15000,
  running: true,
  camera_circle_rotation: {
    radius: 0.3,
    center_distance: 1,
    point_distance: 0,
    speed: _common["default"].TWO_PI / 10000
  },
  setup: function setup(Voxels) {
    Voxels.width = 800;
    Voxels.height = 400;
    Voxels.scale = 2;
    Voxels.map.dims = [32, 64, 32];
    Voxels.map.shift_z = 11;
    Voxels.map.shift_y = 5;
    Voxels.camera.start_position = [16, 0, 9];
    Voxels.camera.start_rotation = [0, 0, 0];
    Voxels.camera.rotation = [0, 0, 0];

    // Voxels.camera.rotation[0] = 35;
    // Voxels.camera.rotation[2] = 90;

    Voxels.map.wrap = [false, true, false];
    Voxels.texture_sampler.use_blank_color = false;
    Voxels.texture_sampler.default_color = [150, 150, 150];
    Voxels.clip_count = 128;
    Voxels.clip_dist = 80;
    Voxels.light = [.6, .6, .85, .35, .3, .95], Voxels.light_mult = 1.4;
    this.camera_circle_rotation.point_distance = Math.sqrt(this.camera_circle_rotation.radius * this.camera_circle_rotation.radius + this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance);
  },
  add_tower_left: function add_tower_left(map, point) {
    _common["default"].brush(map, point, [point[0], point[1], point[2] + 19], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0] - 1, point[1], point[2]], [point[0] - 1, point[1], point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0] + 1, point[1], point[2]], [point[0] + 1, point[1], point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] - 1, point[2]], [point[0], point[1] - 1, point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2]], [point[0], point[1] + 1, point[2] + 7], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0] - 1, point[1], point[2] + 9], [point[0] - 1, point[1], point[2] + 15], 0x01cccccc);
    _common["default"].brush(map, [point[0] + 1, point[1], point[2] + 10], [point[0] + 1, point[1], point[2] + 13], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] - 1, point[2] + 10], [point[0], point[1] - 1, point[2] + 14], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2] + 11], [point[0], point[1] + 1, point[2] + 16], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0], point[1], point[2] + 17], [point[0], point[1], point[2] + 17], 0);
  },
  add_tower_right: function add_tower_right(map, point) {
    _common["default"].brush(map, point, [point[0], point[1], point[2] + 19], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0] - 1, point[1], point[2]], [point[0] - 1, point[1], point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0] + 1, point[1], point[2]], [point[0] + 1, point[1], point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] - 1, point[2]], [point[0], point[1] - 1, point[2] + 7], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2]], [point[0], point[1] + 1, point[2] + 7], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0] + 1, point[1], point[2] + 9], [point[0] + 1, point[1], point[2] + 15], 0x01cccccc);
    _common["default"].brush(map, [point[0] - 1, point[1], point[2] + 10], [point[0] - 1, point[1], point[2] + 13], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] - 1, point[2] + 10], [point[0], point[1] - 1, point[2] + 14], 0x01cccccc);
    _common["default"].brush(map, [point[0], point[1] + 1, point[2] + 11], [point[0], point[1] + 1, point[2] + 16], 0x01cccccc);

    // ----------------------------------------------------------------------------------

    _common["default"].brush(map, [point[0], point[1], point[2] + 17], [point[0], point[1], point[2] + 17], 0);
  },
  add_tunnel: function add_tunnel(map, y) {
    _common["default"].brush(map, [4, y, 10], [27, y + 8, 16], 0x01cccccc);
    // Common.brush(map, [4, y + 10, 10], [27, y + 18, 16], 0x01cccccc);

    _common["default"].brush(map, [4, y, 11], [4, y + 8, 11], 0);
    _common["default"].brush(map, [27, y, 11], [27, y + 8, 11], 0);
    _common["default"].brush(map, [15, y, 16], [16, y + 8, 16], 0);
    _common["default"].brush(map, [4, y, 12], [10, y + 8, 16], 0);
    _common["default"].brush(map, [21, y, 12], [27, y + 8, 16], 0);
    _common["default"].brush(map, [12, y, 11], [19, y + 8, 15], 0);
    _common["default"].brush(map, [7, y, 10], [24, y + 8, 10], 0);
    _common["default"].brush(map, [11, y, 16], [11, y + 8, 16], 0);
    _common["default"].brush(map, [12, y, 15], [12, y + 8, 15], 0x01cccccc);
    _common["default"].brush(map, [20, y, 16], [20, y + 8, 16], 0);
    _common["default"].brush(map, [19, y, 15], [19, y + 8, 15], 0x01cccccc);
  },
  generate: function generate(Voxels) {
    _common["default"].clear_map(Voxels.map, true);
    _common["default"].brush(Voxels.map, [4, 0, 5], [27, 63, 30], 0);
    _common["default"].brush(Voxels.map, [0, 0, 0], [10, 63, 9], 0x01cccccc);
    _common["default"].brush(Voxels.map, [21, 0, 0], [31, 63, 9], 0x01cccccc);
    _common["default"].brush(Voxels.map, [0, 0, 0], [31, 63, 5], 0x01cccccc);
    _common["default"].brush(Voxels.map, [14, 0, 5], [17, 63, 5], 0);
    _common["default"].brush(Voxels.map, [15, 0, 4], [16, 63, 4], 0);
    _common["default"].brush(Voxels.map, [8, 0, 7], [10, 63, 7], 0);
    _common["default"].brush(Voxels.map, [21, 0, 7], [23, 63, 7], 0);
    _common["default"].brush(Voxels.map, [11, 0, 9], [11, 63, 9], 0x01cccccc);
    _common["default"].brush(Voxels.map, [20, 0, 9], [20, 63, 9], 0x01cccccc);
    _common["default"].brush(Voxels.map, [8, 13, 5], [23, 18, 9], 0);
    SpaceStation.add_tower_left(Voxels.map, [10, 15, 5]);
    SpaceStation.add_tower_right(Voxels.map, [21, 15, 5]);
    SpaceStation.add_tunnel(Voxels.map, 20);
    SpaceStation.add_tunnel(Voxels.map, 40);
    SpaceStation.add_tower_left(Voxels.map, [5, 4, 8]);
    SpaceStation.add_tower_right(Voxels.map, [26, 4, 8]);
    for (var i = 0; i < 64; ++i) {
      if (i % 9 == 0) {
        _common["default"].brush(Voxels.map, [11, i, 5], [11, i + 3, 5], 0);
        _common["default"].brush(Voxels.map, [20, i, 5], [20, i + 3, 5], 0);
      }
    }
  },
  update: function update(Voxels, timestamp, delta) {
    if (!Voxels.free_mode && SpaceStation.running) {
      var xd = timestamp * SpaceStation.xd;
      var zd = timestamp * SpaceStation.zd;
      Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);
      Voxels.camera.position[1] += delta * 0.03;
      Voxels.camera.position[2] = Voxels.camera.start_position[2] + 1.5 * Math.sin(zd);
    }
  }
};
var _default = SpaceStation;
exports["default"] = _default;

},{"common":3}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _common = _interopRequireDefault(require("common"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var TestRoom = {
  name: "Test room",
  data: {},
  setup: function setup(Voxels) {
    Voxels.width = 800;
    Voxels.height = 400;
    Voxels.scale = 2;
    Voxels.clip_count = 64;
    Voxels.clip_dist = 32;
    Voxels.light = [.5, .7, .85, .2, .2, .95];

    // Voxels.camera.start_position = [64.0, 0.0, 16.0];
    Voxels.camera.start_position = [2.5, -4.0, 1.5];
    Voxels.camera.start_rotation = [0, 0, 0];
    Voxels.texture_sampler.use_blank_color = false;
    Voxels.texture_sampler.default_color = [114, 188, 112, 255];
    Voxels.map.dims = [8, 8, 8];
    Voxels.map.shift_z = 6;
    Voxels.map.shift_y = 3;
    // Voxels.map.wrap = [true, true, true];
    Voxels.map.wrap = [true, true, true];
  },
  generate: function generate(Voxels) {
    _common["default"].brush(Voxels.map, [0, 0, 0], [0, 7, 2], 0x010000ff);
    _common["default"].brush(Voxels.map, [4, 0, 0], [4, 7, 2], 0x01ff0000);
    _common["default"].brush(Voxels.map, [4, 1, 1], [4, 7, 1], 0);
    _common["default"].brush(Voxels.map, [0, 1, 1], [0, 7, 1], 0);
    _common["default"].brush(Voxels.map, [0, 4, 0], [4, 4, 2], 0x01009900);
    _common["default"].brush(Voxels.map, [1, 4, 1], [3, 4, 1], 0);
    _common["default"].brush(Voxels.map, [2, 0, 3], [2, 7, 3], 0x01cc9955);
  },
  update: function update(Voxels, timestamp, delta) {
    var rot_x = timestamp * _common["default"].TWO_PI / 10000;
    var rot_z = timestamp * _common["default"].TWO_PI / 20000;
    var zd = timestamp * _common["default"].TWO_PI / 10000;
    Voxels.camera.position[0] = Voxels.camera.start_position[0] + 0.4 * Math.sin(zd * 2);
    Voxels.camera.position[1] += delta * 0.01;
    Voxels.camera.position[2] = Voxels.camera.start_position[2] + 0.2 * Math.sin(zd);
    Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 20 * Math.sin(rot_x);
    Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 50 * Math.sin(rot_z);
  }
};
var _default = TestRoom;
exports["default"] = _default;

},{"common":3}]},{},[4])
//# sourceMappingURL=voxels.js.map
