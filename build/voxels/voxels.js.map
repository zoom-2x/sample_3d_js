{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "assets/textures/voxel.json",
    "node_modules/simplex-noise/dist/cjs/simplex-noise.js",
    "src/common.js",
    "src/voxels/main.js",
    "src/voxels/scenes/hallway.js",
    "src/voxels/scenes/landscape.js",
    "src/voxels/scenes/matrix.js",
    "src/voxels/scenes/space_station.js",
    "src/voxels/scenes/test_room.js"
  ],
  "names": [],
  "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AG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACvE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACvE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAExE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACvE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACvE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAExE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACzE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACzE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC3E,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAE3E,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC5E,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC5E,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC7E,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAE7E,OAAO,GAAG;AACd,CAAC,GAAA,eAAA,CAAA,OAAA,mBAEc,SAAA,cAAS,EAAE,EAAE,EAAE,EAAE,IAAI,EACpC;EACI,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACzE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAEzE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACxE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EACzE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAEzE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC1E,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC1E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC5E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAE5E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC7E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC7E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;EAC9E,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG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aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACvD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEvD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;;EAE9B;;EAEA,GAAG,GAAG;IACF,IAAI,EAAE,mBAAmB;IACzB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAChB,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjB,IAAI,EAAE;EACV,CAAC;;EAED;EACA;EACA,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACnD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACnD,kBAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,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,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAC9D,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAChE,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,CAAC;IAC9D,kBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,E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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "module.exports={\"name\": [\"package/textures/voxels/grid_base.bmp\", \"package/textures/voxels/column_side_0.bmp\", \"package/textures/voxels/column_side_0rcw.bmp\", \"package/textures/voxels/column_side_1.bmp\", \"package/textures/voxels/column_side_1rccw.bmp\", \"package/textures/voxels/column_side_1rcw.bmp\", \"package/textures/voxels/column_top_0.bmp\", \"package/textures/voxels/matrix_cube.bmp\", \"package/textures/voxels/matrix_cube_top.bmp\", \"package/textures/voxels/matrix_cube_bottom.bmp\", \"package/textures/voxels/bricks_0.bmp\", \"package/textures/voxels/bricks_1.bmp\", \"package/textures/voxels/floor_tile_0.bmp\", \"package/textures/voxels/floor_tile_1.bmp\", \"package/textures/voxels/floor_tile_2.bmp\", \"package/textures/voxels/bricks_1_bottom.bmp\", \"package/textures/voxels/bricks_1_top.bmp\", \"package/textures/voxels/deco_0.bmp\", \"package/textures/voxels/light_0.bmp\", \"package/textures/voxels/deco_1.bmp\", \"package/textures/voxels/light_1.bmp\", \"package/textures/voxels/deco_2.bmp\", \"package/textures/voxels/metal_0.bmp\", \"package/textures/voxels/metal_1.bmp\", \"package/textures/voxels/chessboard_x2.bmp\", \"package/textures/voxels/chessboard_x4.bmp\"], \"size\": [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], \"shift\": [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], \"offset\": [0, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600], \"data}",
    "\"use strict\";\n/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2022 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildPermutationTable = exports.createNoise4D = exports.createNoise3D = exports.createNoise2D = void 0;\n// these #__PURE__ comments help uglifyjs with dead code removal\n// \nconst F2 = /*#__PURE__*/ 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = /*#__PURE__*/ (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = /*#__PURE__*/ (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = /*#__PURE__*/ (5.0 - Math.sqrt(5.0)) / 20.0;\n// I'm really not sure why this | 0 (basically a coercion to int)\n// is making this faster but I get ~5 million ops/sec more on the\n// benchmarks across the board or a ~10% speedup.\nconst fastFloor = (x) => Math.floor(x) | 0;\nconst grad2 = /*#__PURE__*/ new Float64Array([1, 1,\n    -1, 1,\n    1, -1,\n    -1, -1,\n    1, 0,\n    -1, 0,\n    1, 0,\n    -1, 0,\n    0, 1,\n    0, -1,\n    0, 1,\n    0, -1]);\n// double seems to be faster than single or int's\n// probably because most operations are in double precision\nconst grad3 = /*#__PURE__*/ new Float64Array([1, 1, 0,\n    -1, 1, 0,\n    1, -1, 0,\n    -1, -1, 0,\n    1, 0, 1,\n    -1, 0, 1,\n    1, 0, -1,\n    -1, 0, -1,\n    0, 1, 1,\n    0, -1, 1,\n    0, 1, -1,\n    0, -1, -1]);\n// double is a bit quicker here as well\nconst grad4 = /*#__PURE__*/ new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n    0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n    1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n    -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n    1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n    -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n    1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n    -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n/**\n * Creates a 2D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction2D}\n */\nfunction createNoise2D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating this yields a little ~3% performance improvement.\n    const permGrad2x = new Float64Array(perm).map(v => grad2[(v % 12) * 2]);\n    const permGrad2y = new Float64Array(perm).map(v => grad2[(v % 12) * 2 + 1]);\n    return function noise2D(x, y) {\n        // if(!isFinite(x) || !isFinite(y)) return 0;\n        let n0 = 0; // Noise contributions from the three corners\n        let n1 = 0;\n        let n2 = 0;\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y) * F2; // Hairy factor for 2D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const t = (i + j) * G2;\n        const X0 = i - t; // Unskew the cell origin back to (x,y) space\n        const Y0 = j - t;\n        const x0 = x - X0; // The x,y distances from the cell origin\n        const y0 = y - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        const y1 = y0 - j1 + G2;\n        const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n        const y2 = y0 - 1.0 + 2.0 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            const gi0 = ii + perm[jj];\n            const g0x = permGrad2x[gi0];\n            const g0y = permGrad2y[gi0];\n            t0 *= t0;\n            // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n            n0 = t0 * t0 * (g0x * x0 + g0y * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            const gi1 = ii + i1 + perm[jj + j1];\n            const g1x = permGrad2x[gi1];\n            const g1y = permGrad2y[gi1];\n            t1 *= t1;\n            // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);\n            n1 = t1 * t1 * (g1x * x1 + g1y * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            const gi2 = ii + 1 + perm[jj + 1];\n            const g2x = permGrad2x[gi2];\n            const g2y = permGrad2y[gi2];\n            t2 *= t2;\n            // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);\n            n2 = t2 * t2 * (g2x * x2 + g2y * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    };\n}\nexports.createNoise2D = createNoise2D;\n/**\n * Creates a 3D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\nfunction createNoise3D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these seems to yield a speedup of over 15%\n    const permGrad3x = new Float64Array(perm).map(v => grad3[(v % 12) * 3]);\n    const permGrad3y = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 1]);\n    const permGrad3z = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 2]);\n    return function noise3D(x, y, z) {\n        let n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const t = (i + j + k) * G3;\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const x0 = x - X0; // The x,y,z distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // X Y Z order\n            else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // X Z Y order\n            else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        }\n        else { // x0<y0\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Z Y X order\n            else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Y Z X order\n            else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n        const y1 = y0 - j1 + G3;\n        const z1 = z0 - k1 + G3;\n        const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n        const y2 = y0 - j2 + 2.0 * G3;\n        const z2 = z0 - k2 + 2.0 * G3;\n        const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n        const y3 = y0 - 1.0 + 3.0 * G3;\n        const z3 = z0 - 1.0 + 3.0 * G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        // Calculate the contribution from the four corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    };\n}\nexports.createNoise3D = createNoise3D;\n/**\n * Creates a 4D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction4D}\n */\nfunction createNoise4D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these leads to a ~10% speedup\n    const permGrad4x = new Float64Array(perm).map(v => grad4[(v % 32) * 4]);\n    const permGrad4y = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 1]);\n    const permGrad4z = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 2]);\n    const permGrad4w = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 3]);\n    return function noise4D(x, y, z, w) {\n        let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        const s = (x + y + z + w) * F4; // Factor for 4D skewing\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const l = fastFloor(w + s);\n        const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const W0 = l - t;\n        const x0 = x - X0; // The x,y,z,w distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        const w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        let rankx = 0;\n        let ranky = 0;\n        let rankz = 0;\n        let rankw = 0;\n        if (x0 > y0)\n            rankx++;\n        else\n            ranky++;\n        if (x0 > z0)\n            rankx++;\n        else\n            rankz++;\n        if (x0 > w0)\n            rankx++;\n        else\n            rankw++;\n        if (y0 > z0)\n            ranky++;\n        else\n            rankz++;\n        if (y0 > w0)\n            ranky++;\n        else\n            rankw++;\n        if (z0 > w0)\n            rankz++;\n        else\n            rankw++;\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        // Rank 2 denotes the second largest coordinate.\n        // Rank 1 denotes the second smallest coordinate.\n        // The integer offsets for the second simplex corner\n        const i1 = rankx >= 3 ? 1 : 0;\n        const j1 = ranky >= 3 ? 1 : 0;\n        const k1 = rankz >= 3 ? 1 : 0;\n        const l1 = rankw >= 3 ? 1 : 0;\n        // The integer offsets for the third simplex corner\n        const i2 = rankx >= 2 ? 1 : 0;\n        const j2 = ranky >= 2 ? 1 : 0;\n        const k2 = rankz >= 2 ? 1 : 0;\n        const l2 = rankw >= 2 ? 1 : 0;\n        // The integer offsets for the fourth simplex corner\n        const i3 = rankx >= 1 ? 1 : 0;\n        const j3 = ranky >= 1 ? 1 : 0;\n        const k3 = rankz >= 1 ? 1 : 0;\n        const l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n        const y1 = y0 - j1 + G4;\n        const z1 = z0 - k1 + G4;\n        const w1 = w0 - l1 + G4;\n        const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n        const y2 = y0 - j2 + 2.0 * G4;\n        const z2 = z0 - k2 + 2.0 * G4;\n        const w2 = w0 - l2 + 2.0 * G4;\n        const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n        const y3 = y0 - j3 + 3.0 * G4;\n        const z3 = z0 - k3 + 3.0 * G4;\n        const w3 = w0 - l3 + 3.0 * G4;\n        const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n        const y4 = y0 - 1.0 + 4.0 * G4;\n        const z4 = z0 - 1.0 + 4.0 * G4;\n        const w4 = w0 - 1.0 + 4.0 * G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        const ll = l & 255;\n        // Calculate the contribution from the five corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk + perm[ll]]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);\n        }\n        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0)\n            n4 = 0.0;\n        else {\n            const gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];\n            t4 *= t4;\n            n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    };\n}\nexports.createNoise4D = createNoise4D;\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nfunction buildPermutationTable(random) {\n    const tableSize = 512;\n    const p = new Uint8Array(tableSize);\n    for (let i = 0; i < tableSize / 2; i++) {\n        p[i] = i;\n    }\n    for (let i = 0; i < tableSize / 2 - 1; i++) {\n        const r = i + ~~(random() * (256 - i));\n        const aux = p[i];\n        p[i] = p[r];\n        p[r] = aux;\n    }\n    for (let i = 256; i < tableSize; i++) {\n        p[i] = p[i - 256];\n    }\n    return p;\n}\nexports.buildPermutationTable = buildPermutationTable;\n//# sourceMappingURL=simplex-noise.js.map",
    "var color_0 = [0, 0, 0];\r\nvar color_1 = [0, 0, 0];\r\nvar color_2 = [0, 0, 0];\r\nvar color_3 = [0, 0, 0];\r\nvar color_4 = [0, 0, 0];\r\nvar color_5 = [0, 0, 0];\r\n\r\nvar Common =\r\n{\r\n    TWO_PI: 2 * Math.PI,\r\n    ONE80_OVER_PI: 57.2957795130823208768,\r\n    PI_OVER_ONE80: 0.01745329251994329577,\r\n    EPSILON: 0.0000001,\r\n    ONE_OVER_255: 0.00392156862745098039,\r\n\r\n    // ----------------------------------------------------------------------------------\r\n    // -- Voxel object rotations P(x,y,z)\r\n    // ----------------------------------------------------------------------------------\r\n    // ox cw(90) / (Px,-Pz,Py)\r\n    // ox ccw(-90) / (Px,Pz,-Py)\r\n    // ox flip(180) / (Px,-Py,-Pz)\r\n    // oy cw(90) / (Pz,Py,-Px)\r\n    // oy ccw(-90) / (-Pz,Py,Px)\r\n    // oy flip(180) / (-Px,Py,-Pz)\r\n    // oz ccw(90) / (-Py,Px,Pz)\r\n    // oz cw(-90) / (Py,-Px,Pz)\r\n    // oz flip(180) / (-Px,-Py,Pz)\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    VOXEL_ROXCW: 0,\r\n    VOXEL_ROXCCW: 1,\r\n    VOXEL_ROXFLIP: 2,\r\n    VOXEL_ROYCCW: 3,\r\n    VOXEL_ROYCCW: 4,\r\n    VOXEL_ROYFLIP: 5,\r\n    VOXEL_ROZCCW: 6,\r\n    VOXEL_ROZCW: 7,\r\n    VOXEL_ROZFLIP: 8,\r\n\r\n    // First 3 components extract the point components and the second 3 apply a sign change.\r\n    voxel_rotations: [\r\n        [0, 2, 1, 1, -1, 1],\r\n        [0, 2, 1, 1, 1, -1],\r\n        [0, 1, 2, 1, -1, -1],\r\n        [2, 1, 0, 1, 1, -1],\r\n        [2, 1, 0, -1, 1, 1],\r\n        [0, 1, 2, -1, 1, -1],\r\n        [1, 0, 2, -1, 1, 1],\r\n        [1, 0, 2, 1, -1, 1],\r\n        [0, 1, 2, -1, -1, 1]\r\n    ],\r\n\r\n    rad2deg: function(angle) { return angle * Common.ONE80_OVER_PI; },\r\n    deg2rad: function(angle) { return angle * Common.PI_OVER_ONE80; },\r\n\r\n    color_one_to_255: function(c)\r\n    {\r\n        c[0] *= 255;\r\n        c[1] *= 255;\r\n        c[2] *= 255;\r\n\r\n        return c;\r\n    },\r\n\r\n    color_255_to_one: function(c)\r\n    {\r\n        c[0] *= Common.ONE_OVER_255;\r\n        c[1] *= Common.ONE_OVER_255;\r\n        c[2] *= Common.ONE_OVER_255;\r\n\r\n        return c;\r\n    },\r\n\r\n    color_clamp: function(c)\r\n    {\r\n        c[0] = Common.clamp(c[0], 0, 255);\r\n        c[1] = Common.clamp(c[1], 0, 255);\r\n        c[2] = Common.clamp(c[2], 0, 255);\r\n    },\r\n\r\n    color_reinhard: function(c)\r\n    {\r\n        c[0] = 255 * c[0] / (c[0] + 255);\r\n        c[1] = 255 * c[1] / (c[1] + 255);\r\n        c[2] = 255 * c[2] / (c[2] + 255);\r\n    },\r\n\r\n    clamp: function(val, min, max)\r\n    {\r\n        if (val < min)\r\n            val = min\r\n        else if (val > max)\r\n            val = max;\r\n\r\n        return val;\r\n    },\r\n\r\n    color_mult: function(c, m)\r\n    {\r\n        var res = [0, 0, 0, 0];\r\n\r\n        res[0] = c[0] * m;\r\n        res[1] = c[1] * m;\r\n        res[2] = c[2] * m;\r\n        res[3] = c[3];\r\n\r\n        return res;\r\n    },\r\n\r\n    vec3_add: function(v1, v2)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        res[0] = v1[0] + v2[0];\r\n        res[1] = v1[1] + v2[1];\r\n        res[2] = v1[2] + v2[2];\r\n\r\n        return res;\r\n    },\r\n\r\n    vec3_sub: function(v1, v2)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        res[0] = v1[0] - v2[0];\r\n        res[1] = v1[1] - v2[1];\r\n        res[2] = v1[2] - v2[2];\r\n\r\n        return res;\r\n    },\r\n\r\n    vec3_dot: function(v1, v2) {\r\n        return (v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]);\r\n    },\r\n\r\n    vec3_len: function(v) {\r\n        return Math.sqrt(Common.vec3_dot(v, v));\r\n    },\r\n\r\n    vec3_len2: function(v) {\r\n        return Common.vec3_dot(v, v);\r\n    },\r\n\r\n    vec3_cross: function(v1, v2)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        res[0] = v1[1] * v2[2] - v1[2] * v2[1];\r\n        res[1] = v1[2] * v2[0] - v1[0] * v2[2];\r\n        res[2] = v1[0] * v2[1] - v1[1] * v2[0];\r\n\r\n        return res;\r\n    },\r\n\r\n    vec3_normalize: function(v)\r\n    {\r\n        var len = 1 / Common.vec3_len(v);\r\n\r\n        v[0] *= len;\r\n        v[1] *= len;\r\n        v[2] *= len;\r\n\r\n        return v;\r\n    },\r\n\r\n    rotate_x: function(p, angle)\r\n    {\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        var t0 = cos * p[1] - sin * p[2];\r\n        var t1 = sin * p[1] + cos * p[2];\r\n\r\n        p[1] = t0;\r\n        p[2] = t1;\r\n    },\r\n\r\n    rotate_y: function(p, angle)\r\n    {\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        var t0 = cos * p[0] + sin * p[2];\r\n        var t1 = -sin * p[0] + cos * p[2];\r\n\r\n        p[0] = t0;\r\n        p[2] = t1;\r\n    },\r\n\r\n    rotate_z: function(p, angle)\r\n    {\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        var t0 = cos * p[0] - sin * p[1];\r\n        var t1 = sin * p[0] + cos * p[1];\r\n\r\n        p[0] = t0;\r\n        p[1] = t1;\r\n    },\r\n\r\n    rotate_around_x: function(p, angle)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        res[0] = p[0];\r\n        res[1] = cos * p[1] - sin * p[2];\r\n        res[2] = sin * p[1] + cos * p[2];\r\n\r\n        return res;\r\n    },\r\n\r\n    rotate_around_y: function(p, angle)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        res[0] = cos * p[0] + sin * p[2];\r\n        res[1] = p[1];\r\n        res[2] = -sin * p[0] + cos * p[2];\r\n\r\n        return res;\r\n    },\r\n\r\n    rotate_around_z: function(p, angle)\r\n    {\r\n        var res = [0, 0, 0];\r\n\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        res[0] = cos * p[0] - sin * p[1];\r\n        res[1] = sin * p[0] + cos * p[1];\r\n        res[2] = p[2];\r\n\r\n        return res;\r\n    },\r\n\r\n    mat4_empty: function()\r\n    {\r\n        var mat = new Array(4*4);\r\n\r\n        mat[0] = 0;\r\n        mat[1] = 0;\r\n        mat[2] = 0;\r\n        mat[3] = 0;\r\n\r\n        mat[4] = 0;\r\n        mat[5] = 0;\r\n        mat[6] = 0;\r\n        mat[7] = 0;\r\n\r\n        mat[8] = 0;\r\n        mat[9] = 0;\r\n        mat[10] = 0;\r\n        mat[11] = 0;\r\n\r\n        mat[12] = 0;\r\n        mat[13] = 0;\r\n        mat[14] = 0;\r\n        mat[15] = 0;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_identity: function()\r\n    {\r\n        var mat = new Array(4*4);\r\n\r\n        mat[0] = 1;\r\n        mat[1] = 0;\r\n        mat[2] = 0;\r\n        mat[3] = 0;\r\n\r\n        mat[4] = 0;\r\n        mat[5] = 1;\r\n        mat[6] = 0;\r\n        mat[7] = 0;\r\n\r\n        mat[8] = 0;\r\n        mat[9] = 0;\r\n        mat[10] = 1;\r\n        mat[11] = 0;\r\n\r\n        mat[12] = 0;\r\n        mat[13] = 0;\r\n        mat[14] = 0;\r\n        mat[15] = 1;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_scale: function(sx, sy, sz)\r\n    {\r\n        var mat = Common.mat4_identity();\r\n\r\n        mat[0] = sx;\r\n        mat[5] = sy;\r\n        mat[10] = sz;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_rotation_x: function(angle)\r\n    {\r\n        var mat = Common.mat4_identity();\r\n\r\n        var cos_t = Math.cos(angle);\r\n        var sin_t = Math.sin(angle);\r\n\r\n        mat[5] = cos_t;\r\n        mat[6] = -sin_t;\r\n        mat[9] = sin_t;\r\n        mat[10] = cos_t;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_rotation_y: function(angle)\r\n    {\r\n        var mat = Common.mat4_identity();\r\n\r\n        var cos_t = Math.cos(angle);\r\n        var sin_t = Math.sin(angle);\r\n\r\n        mat[0] = cos_t;\r\n        mat[8] = -sin_t;\r\n        mat[2] = sin_t;\r\n        mat[10] = cos_t;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_rotation_z: function(angle)\r\n    {\r\n        var mat = Common.mat4_identity();\r\n\r\n        var cos_t = Math.cos(angle);\r\n        var sin_t = Math.sin(angle);\r\n\r\n        mat[0] = cos_t;\r\n        mat[4] = sin_t;\r\n        mat[1] = -sin_t;\r\n        mat[5] = cos_t;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_mul_vec3: function(m, v)\r\n    {\r\n        var result = [0, 0, 0];\r\n\r\n        result[0] = m[0] * v[0] + m[0] * v[1] + m[0] * v[2];\r\n        result[1] = m[4] * v[0] + m[5] * v[1] + m[6] * v[2];\r\n        result[2] = m[8] * v[0] + m[9] * v[1] + m[10] * v[2];\r\n\r\n        return result;\r\n    },\r\n\r\n    mat4_mulvec: function(m, v)\r\n    {\r\n        var res = [0, 0, 0, 1];\r\n\r\n        res[0] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3];\r\n        res[1] = m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3];\r\n        res[2] = m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3];\r\n        res[3] = m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3];\r\n\r\n        return res;\r\n    },\r\n\r\n    transform_point: function(m, p)\r\n    {\r\n        var res = [0, 0, 0, 1];\r\n\r\n        res[0] = m[0] * p[0] + m[1] * p[1] + m[2] * p[2] + m[3];\r\n        res[1] = m[4] * p[0] + m[5] * p[1] + m[6] * p[2] + m[7];\r\n        res[2] = m[8] * p[0] + m[9] * p[1] + m[10] * p[2] + m[11];\r\n        res[3] = m[12] * p[0] + m[13] * p[1] + m[14] * p[2] + m[15];\r\n\r\n        return res;\r\n    },\r\n\r\n    transform_point_buffer: function(m, px, py, pz, buffer, from)\r\n    {\r\n        buffer[from + 0] = m[0] * px + m[1] * py + m[2] * pz + m[3];\r\n        buffer[from + 1] = m[4] * px + m[5] * py + m[6] * pz + m[7];\r\n        buffer[from + 2] = m[8] * px + m[9] * py + m[10] * pz + m[11];\r\n        buffer[from + 3] = m[12] * px + m[13] * py + m[14] * pz + m[15];\r\n    },\r\n\r\n    transform_vector: function(m, p)\r\n    {\r\n        var res = [0, 0, 0, 0];\r\n\r\n        res[0] = m[0] * p[0] + m[1] * p[1] + m[2] * p[2] + m[3];\r\n        res[1] = m[4] * p[0] + m[5] * p[1] + m[6] * p[2] + m[7];\r\n        res[2] = m[8] * p[0] + m[9] * p[1] + m[12] * p[2] + m[13];\r\n\r\n        return res;\r\n    },\r\n\r\n    perspective_division: function(p)\r\n    {\r\n        var res = [0, 0, 0, 1];\r\n\r\n        res[3] = 1.0 / p[3];\r\n        res[0] = p[0] * res[3];\r\n        res[1] = p[1] * res[3];\r\n        res[2] = p[2] * res[3];\r\n\r\n        return res;\r\n    },\r\n\r\n    perspective_division_buffer: function(buffer, from)\r\n    {\r\n        var t = 1.0 / buffer[from + 3];\r\n\r\n        buffer[from + 3] = t;\r\n        buffer[from + 0] *= t;\r\n        buffer[from + 1] *= t;\r\n        buffer[from + 2] *= t;\r\n    },\r\n\r\n    viewport_transform: function(m, p)\r\n    {\r\n        var res = [0, 0, 0, 0];\r\n\r\n        res[0] = m[0] * p[0] + m[3];\r\n        res[1] = m[5] * p[1] + m[7];\r\n        res[2] = m[10] * p[2] + m[11];\r\n        res[3] = p[3];\r\n\r\n        return res;\r\n    },\r\n\r\n    viewport_transform_buffer: function(m, buffer, from)\r\n    {\r\n        buffer[from + 0] = m[0] * buffer[from + 0] + m[3];\r\n        buffer[from + 1] = m[5] * buffer[from + 1] + m[7];\r\n        buffer[from + 2] = m[10] * buffer[from + 2] + m[11];\r\n        buffer[from + 3] = buffer[from + 3];\r\n    },\r\n\r\n    triangle_project: function(m, buffer)\r\n    {\r\n        var x, y, z, w;\r\n\r\n        for (var i = 0; i < 3; ++i)\r\n        {\r\n            x = buffer[i][0];\r\n            y = buffer[i][1];\r\n            z = buffer[i][2];\r\n\r\n            buffer[i][0] = m[0] * x + m[1] * y + m[2] * z + m[3];\r\n            buffer[i][1] = m[4] * x + m[5] * y + m[6] * z + m[7];\r\n            buffer[i][2] = m[8] * x + m[9] * y + m[10] * z + m[11];\r\n            buffer[i][3] = m[12] * x + m[13] * y + m[14] * z + m[15];\r\n\r\n            w = 1.0 / buffer[i][3];\r\n\r\n            buffer[i][0] *= w;\r\n            buffer[i][1] *= w;\r\n            buffer[i][2] *= w;\r\n            buffer[i][3] = w;\r\n        }\r\n    },\r\n\r\n    triangle_viewport_transform: function(m, buffer)\r\n    {\r\n        for (var i = 0; i < 3; ++i)\r\n        {\r\n            buffer[i][0] = m[0] * buffer[i][0] + m[3];\r\n            buffer[i][1] = m[5] * buffer[i][1] + m[7];\r\n            buffer[i][2] = m[10] * buffer[i][2] + m[11];\r\n            // buffer[i][3] = buffer[from + 3];\r\n        }\r\n    },\r\n\r\n    mat4_mul: function(m1, m2)\r\n    {\r\n        var mat = new Array(4*4);\r\n\r\n        mat[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + m1[3] * m2[12];\r\n        mat[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + m1[3] * m2[13];\r\n        mat[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + m1[3] * m2[14];\r\n        mat[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + m1[3] * m2[15];\r\n\r\n        mat[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + m1[7] * m2[12];\r\n        mat[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + m1[7] * m2[13];\r\n        mat[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + m1[7] * m2[14];\r\n        mat[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + m1[7] * m2[15];\r\n\r\n        mat[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + m1[11] * m2[12];\r\n        mat[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + m1[11] * m2[13];\r\n        mat[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + m1[11] * m2[14];\r\n        mat[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + m1[11] * m2[15];\r\n\r\n        mat[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + m1[15] * m2[12];\r\n        mat[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + m1[15] * m2[13];\r\n        mat[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + m1[15] * m2[14];\r\n        mat[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + m1[15] * m2[15];\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_mul_dest: function(m1, m2, dest)\r\n    {\r\n        dest[0] = m1[0] * m2[0] + m1[1] * m2[4] + m1[2] * m2[8] + m1[3] * m2[12];\r\n        dest[1] = m1[0] * m2[1] + m1[1] * m2[5] + m1[2] * m2[9] + m1[3] * m2[13];\r\n        dest[2] = m1[0] * m2[2] + m1[1] * m2[6] + m1[2] * m2[10] + m1[3] * m2[14];\r\n        dest[3] = m1[0] * m2[3] + m1[1] * m2[7] + m1[2] * m2[11] + m1[3] * m2[15];\r\n\r\n        dest[4] = m1[4] * m2[0] + m1[5] * m2[4] + m1[6] * m2[8] + m1[7] * m2[12];\r\n        dest[5] = m1[4] * m2[1] + m1[5] * m2[5] + m1[6] * m2[9] + m1[7] * m2[13];\r\n        dest[6] = m1[4] * m2[2] + m1[5] * m2[6] + m1[6] * m2[10] + m1[7] * m2[14];\r\n        dest[7] = m1[4] * m2[3] + m1[5] * m2[7] + m1[6] * m2[11] + m1[7] * m2[15];\r\n\r\n        dest[8] = m1[8] * m2[0] + m1[9] * m2[4] + m1[10] * m2[8] + m1[11] * m2[12];\r\n        dest[9] = m1[8] * m2[1] + m1[9] * m2[5] + m1[10] * m2[9] + m1[11] * m2[13];\r\n        dest[10] = m1[8] * m2[2] + m1[9] * m2[6] + m1[10] * m2[10] + m1[11] * m2[14];\r\n        dest[11] = m1[8] * m2[3] + m1[9] * m2[7] + m1[10] * m2[11] + m1[11] * m2[15];\r\n\r\n        dest[12] = m1[12] * m2[0] + m1[13] * m2[4] + m1[14] * m2[8] + m1[15] * m2[12];\r\n        dest[13] = m1[12] * m2[1] + m1[13] * m2[5] + m1[14] * m2[9] + m1[15] * m2[13];\r\n        dest[14] = m1[12] * m2[2] + m1[13] * m2[6] + m1[14] * m2[10] + m1[15] * m2[14];\r\n        dest[15] = m1[12] * m2[3] + m1[13] * m2[7] + m1[14] * m2[11] + m1[15] * m2[15];\r\n    },\r\n\r\n    mat4_det: function(m)\r\n    {\r\n        // (0,0) minor.\r\n        var det00 = m[5] * (m[10] * m[15] - m[11] * m[14]) -\r\n                    m[6] * (m[9] * m[15] - m[11] * m[13]) +\r\n                    m[7] * (m[9] * m[14] - m[10] * m[13]);\r\n\r\n        // (0,1) minor.\r\n        var det01 = m[4] * (m[10] * m[15] - m[11] * m[14]) -\r\n                    m[6] * (m[8] * m[15] - m[11] * m[12]) +\r\n                    m[7] * (m[8] * m[14] - m[10] * m[12]);\r\n\r\n        // (0,2) minor.\r\n        var det02 = m[4] * (m[9] * m[15] - m[11] * m[13]) -\r\n                    m[5] * (m[8] * m[15] - m[11] * m[12]) +\r\n                    m[7] * (m[8] * m[13] - m[9] * m[12]);\r\n\r\n        // (0,3) minor.\r\n        var det03 = m[4] * (m[9] * m[14] - m[10] * m[13]) -\r\n                    m[5] * (m[8] * m[14] - m[10] * m[12]) +\r\n                    m[6] * (m[8] * m[13] - m[9] * m[12]);\r\n\r\n        var result = m[0] * det00 - m[1] * det01 + m[2] * det02 - m[3] * det03;\r\n\r\n        return result;\r\n    },\r\n\r\n    // mat4_inv: function(in, out)\r\n    // {\r\n    //     var one_over_det = 1.0f / mat4_det(in);\r\n    //     var tmp = new Array(36);\r\n\r\n    //     tmp[0] = mat->data[2][2] * mat->data[3][3];\r\n    //     tmp[1] = mat->data[2][3] * mat->data[3][2];\r\n    //     tmp[2] = mat->data[2][1] * mat->data[3][3];\r\n    //     tmp[3] = mat->data[2][3] * mat->data[3][1];\r\n    //     tmp[4] = mat->data[2][1] * mat->data[3][2];\r\n    //     tmp[5] = mat->data[2][2] * mat->data[3][1];\r\n    //     tmp[6] = mat->data[2][0] * mat->data[3][3];\r\n    //     tmp[7] = mat->data[2][3] * mat->data[3][0];\r\n    //     tmp[8] = mat->data[2][0] * mat->data[3][2];\r\n    //     tmp[9] = mat->data[2][2] * mat->data[3][0];\r\n    //     tmp[10] = mat->data[2][0] * mat->data[3][1];\r\n    //     tmp[11] = mat->data[2][1] * mat->data[3][0];\r\n    //     tmp[12] = mat->data[1][2] * mat->data[3][3];\r\n    //     tmp[13] = mat->data[1][3] * mat->data[3][2];\r\n    //     tmp[14] = mat->data[1][1] * mat->data[3][3];\r\n    //     tmp[15] = mat->data[1][3] * mat->data[3][1];\r\n    //     tmp[16] = mat->data[1][1] * mat->data[3][2];\r\n    //     tmp[17] = mat->data[1][2] * mat->data[3][1];\r\n    //     tmp[18] = mat->data[1][0] * mat->data[3][3];\r\n    //     tmp[19] = mat->data[1][3] * mat->data[3][0];\r\n    //     tmp[20] = mat->data[1][0] * mat->data[3][2];\r\n    //     tmp[21] = mat->data[1][2] * mat->data[3][0];\r\n    //     tmp[22] = mat->data[1][0] * mat->data[3][1];\r\n    //     tmp[23] = mat->data[1][1] * mat->data[3][0];\r\n    //     tmp[24] = mat->data[1][2] * mat->data[2][3];\r\n    //     tmp[25] = mat->data[1][3] * mat->data[2][2];\r\n    //     tmp[26] = mat->data[1][1] * mat->data[2][3];\r\n    //     tmp[27] = mat->data[1][3] * mat->data[2][1];\r\n    //     tmp[28] = mat->data[1][1] * mat->data[2][2];\r\n    //     tmp[29] = mat->data[1][2] * mat->data[2][1];\r\n    //     tmp[30] = mat->data[1][0] * mat->data[2][3];\r\n    //     tmp[31] = mat->data[1][3] * mat->data[2][0];\r\n    //     tmp[32] = mat->data[1][0] * mat->data[2][2];\r\n    //     tmp[33] = mat->data[1][2] * mat->data[2][0];\r\n    //     tmp[34] = mat->data[1][0] * mat->data[2][1];\r\n    //     tmp[35] = mat->data[1][1] * mat->data[2][0];\r\n\r\n    //     r32 e11 = mat->data[1][1] * (tmp[0] - tmp[1]) - mat->data[1][2] * (tmp[2] - tmp[3]) + mat->data[1][3] * (tmp[4] - tmp[5]);\r\n    //     r32 e12 = mat->data[1][0] * (tmp[0] - tmp[1]) - mat->data[1][2] * (tmp[6] - tmp[7]) + mat->data[1][3] * (tmp[8] - tmp[9]);\r\n    //     r32 e13 = mat->data[1][0] * (tmp[2] - tmp[3]) - mat->data[1][1] * (tmp[6] - tmp[7]) + mat->data[1][3] * (tmp[10] - tmp[11]);\r\n    //     r32 e14 = mat->data[1][0] * (tmp[4] - tmp[5]) - mat->data[1][1] * (tmp[8] - tmp[9]) + mat->data[1][2] * (tmp[10] - tmp[11]);\r\n    //     r32 e21 = mat->data[0][1] * (tmp[0] - tmp[1]) - mat->data[0][2] * (tmp[2] - tmp[3]) + mat->data[0][3] * (tmp[4] - tmp[5]);\r\n    //     r32 e22 = mat->data[0][0] * (tmp[0] - tmp[1]) - mat->data[0][2] * (tmp[6] - tmp[7]) + mat->data[0][3] * (tmp[8] - tmp[9]);\r\n    //     r32 e23 = mat->data[0][0] * (tmp[2] - tmp[3]) - mat->data[0][1] * (tmp[6] - tmp[7]) + mat->data[0][3] * (tmp[10] - tmp[11]);\r\n    //     r32 e24 = mat->data[0][0] * (tmp[4] - tmp[5]) - mat->data[0][1] * (tmp[8] - tmp[9]) + mat->data[0][2] * (tmp[10] - tmp[11]);\r\n    //     r32 e31 = mat->data[0][1] * (tmp[12] - tmp[13]) - mat->data[0][2] * (tmp[14] - tmp[15]) + mat->data[0][3] * (tmp[16] - tmp[17]);\r\n    //     r32 e32 = mat->data[0][0] * (tmp[12] - tmp[13]) - mat->data[0][2] * (tmp[18] - tmp[19]) + mat->data[0][3] * (tmp[20] - tmp[21]);\r\n    //     r32 e33 = mat->data[0][0] * (tmp[14] - tmp[15]) - mat->data[0][1] * (tmp[18] - tmp[19]) + mat->data[0][3] * (tmp[22] - tmp[23]);\r\n    //     r32 e34 = mat->data[0][0] * (tmp[16] - tmp[17]) - mat->data[0][1] * (tmp[20] - tmp[21]) + mat->data[0][2] * (tmp[22] - tmp[23]);\r\n    //     r32 e41 = mat->data[0][1] * (tmp[24] - tmp[25]) - mat->data[0][2] * (tmp[26] - tmp[27]) + mat->data[0][3] * (tmp[28] - tmp[29]);\r\n    //     r32 e42 = mat->data[0][0] * (tmp[24] - tmp[25]) - mat->data[0][2] * (tmp[30] - tmp[31]) + mat->data[0][3] * (tmp[32] - tmp[33]);\r\n    //     r32 e43 = mat->data[0][0] * (tmp[26] - tmp[27]) - mat->data[0][1] * (tmp[30] - tmp[31]) + mat->data[0][3] * (tmp[34] - tmp[35]);\r\n    //     r32 e44 = mat->data[0][0] * (tmp[28] - tmp[29]) - mat->data[0][1] * (tmp[32] - tmp[33]) + mat->data[0][2] * (tmp[34] - tmp[35]);\r\n\r\n    //     inv->data[0][0] = one_over_det * e11;\r\n    //     inv->data[0][1] = -one_over_det * e21;\r\n    //     inv->data[0][2] = one_over_det * e31;\r\n    //     inv->data[0][3] = -one_over_det * e41;\r\n\r\n    //     inv->data[1][0] = -one_over_det * e12;\r\n    //     inv->data[1][1] = one_over_det * e22;\r\n    //     inv->data[1][2] = -one_over_det * e32;\r\n    //     inv->data[1][3] = one_over_det * e42;\r\n\r\n    //     inv->data[2][0] = one_over_det * e13;\r\n    //     inv->data[2][1] = -one_over_det * e23;\r\n    //     inv->data[2][2] = one_over_det * e33;\r\n    //     inv->data[2][3] = -one_over_det * e43;\r\n\r\n    //     inv->data[3][0] = -one_over_det * e14;\r\n    //     inv->data[3][1] = one_over_det * e24;\r\n    //     inv->data[3][2] = -one_over_det * e34;\r\n    //     inv->data[3][3] = one_over_det * e44;\r\n    // },\r\n\r\n    mat4_lookat: function(eye, target, up)\r\n    {\r\n        var mat = Common.mat4_identity();\r\n\r\n        var z_axis = Common.vec3_normalize(Common.vec3_sub(eye, target));\r\n        var x_axis = Common.vec3_normalize(Common.vec3_cross(up, z_axis));\r\n        var y_axis = Common.vec3_normalize(Common.vec3_cross(z_axis, x_axis));\r\n\r\n        // orthogonal axis => inverse = transpose (rotation).\r\n        mat[0] = x_axis[0];\r\n        mat[1] = x_axis[1];\r\n        mat[2] = x_axis[2];\r\n\r\n        mat[4] = y_axis[0];\r\n        mat[5] = y_axis[1];\r\n        mat[6] = y_axis[2];\r\n\r\n        mat[8] = z_axis[0];\r\n        mat[9] = z_axis[1];\r\n        mat[10] = z_axis[2];\r\n\r\n        // Extract the eye vector's components relative to the camera axis (translation).\r\n        mat[3] = -Common.vec3_dot(x_axis, eye);\r\n        mat[7] = -Common.vec3_dot(y_axis, eye);\r\n        mat[11] = -Common.vec3_dot(z_axis, eye);\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_lookat_dest: function(eye, target, up, dest)\r\n    {\r\n        var z_axis = Common.vec3_normalize(Common.vec3_sub(eye, target));\r\n        var x_axis = Common.vec3_normalize(Common.vec3_cross(up, z_axis));\r\n        var y_axis = Common.vec3_normalize(Common.vec3_cross(z_axis, x_axis));\r\n\r\n        // orthogonal axis => inverse = transpose (rotation).\r\n        dest[0] = x_axis[0];\r\n        dest[1] = x_axis[1];\r\n        dest[2] = x_axis[2];\r\n\r\n        dest[4] = y_axis[0];\r\n        dest[5] = y_axis[1];\r\n        dest[6] = y_axis[2];\r\n\r\n        dest[8] = z_axis[0];\r\n        dest[9] = z_axis[1];\r\n        dest[10] = z_axis[2];\r\n\r\n        // Extract the eye vector's components relative to the camera axis (translation).\r\n        dest[3] = -Common.vec3_dot(x_axis, eye);\r\n        dest[7] = -Common.vec3_dot(y_axis, eye);\r\n        dest[11] = -Common.vec3_dot(z_axis, eye);\r\n    },\r\n\r\n    // fov (radians)\r\n    mat4_perspective: function(aspect, fov, f_near, f_far)\r\n    {\r\n        var mat = Common.mat4_empty();\r\n\r\n        var d = 1.0 / Math.tan(fov * 0.5);\r\n        var s = f_near - f_far;\r\n\r\n        mat[0] = d / aspect;\r\n        mat[5] = d;\r\n        mat[10] = (f_near + f_far) / s;\r\n        mat[14] = -1;\r\n        mat[11] = 2 * f_near * f_far / s;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_perspective_dest: function(aspect, fov, f_near, f_far, dest)\r\n    {\r\n        var d = 1.0 / Math.tan(fov * 0.5);\r\n        var s = f_near - f_far;\r\n\r\n        dest[0] = d / aspect;\r\n        dest[5] = d;\r\n        dest[10] = (f_near + f_far) / s;\r\n        dest[14] = -1;\r\n        dest[11] = 2 * f_near * f_far / s;\r\n    },\r\n\r\n    mat4_orthographic: function(f_right, f_left, f_top, f_bottom, f_near, f_far)\r\n    {\r\n        var mat = Common.mat4_empty();\r\n\r\n        var rml = f_right - f_left;\r\n        var fmn = f_far - f_near;\r\n        var tmb = f_top - f_bottom;\r\n\r\n        mat[0] = 2 / rml;\r\n        mat[5] = 2 / tmb;\r\n        mat[10] = -2 / fmn;\r\n        mat[15] = 1;\r\n        mat[3] = -(f_right + f_left) / rml;\r\n        mat[7] = -(f_top + f_bottom) / tmb;\r\n        mat[11] = -(f_far + f_near) / fmn;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_viewport: function(ws, hs, sx, sy, ds)\r\n    {\r\n        var mat = Common.mat4_empty();\r\n\r\n        var wh = ws / 2.0;\r\n        var hh = hs / 2.0;\r\n        var dh = ds / 2.0;\r\n\r\n        mat[0] = wh;\r\n        mat[3] = wh + sx;\r\n        mat[5] = -hh;\r\n        mat[7] = hh + sy;\r\n        mat[10] = dh;\r\n        mat[11] = dh;\r\n        mat[15] = 1;\r\n\r\n        return mat;\r\n    },\r\n\r\n    mat4_viewport_dest: function(ws, hs, sx, sy, ds, dest)\r\n    {\r\n        var wh = ws / 2.0;\r\n        var hh = hs / 2.0;\r\n        var dh = ds / 2.0;\r\n\r\n        dest[0] = wh;\r\n        dest[3] = wh + sx;\r\n        dest[5] = -hh;\r\n        dest[7] = hh + sy;\r\n        dest[10] = dh;\r\n        dest[11] = dh;\r\n        dest[15] = 1;\r\n    },\r\n\r\n    // get_map_index: function(map, x, y, z) {\r\n    //     return map.zpitch * z + map.dims[0] * y + x;\r\n    // },\r\n\r\n    clear_map: function(map, fill)\r\n    {\r\n        fill = fill ? 0x01000000 : 0;\r\n\r\n        for (var z = 0; z < map.dims[2]; ++z) {\r\n            for (var y = 0; y < map.dims[1]; ++y) {\r\n                for (var x = 0; x < map.dims[0]; ++x) {\r\n                    map.data[Common.get_map_index(map, x, y, z)] = fill;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    get_map_index: function(map, x, y, z) {\r\n        return (z << map.shift_z) | (y << map.shift_y) | x;\r\n    },\r\n\r\n    // Camera rotation based on a circle.\r\n    get_camera_circle_rotation_angles: function(t, rot)\r\n    {\r\n        var res = [0, 0];\r\n        var p = [rot.radius * Math.cos(t), 1, rot.radius * Math.sin(t)];\r\n\r\n        res[0] = Math.asin(p[2] / rot.point_distance);\r\n        res[1] = Math.atan2(p[0], rot.center_distance);\r\n\r\n        return res;\r\n    },\r\n\r\n    // Camera rotation based on an ellipse.\r\n    get_camera_ellipse_rotation_angles: function(t, rot)\r\n    {},\r\n\r\n    add_voxel_texture: function(Voxels, faces)\r\n    {\r\n        var index = Voxels.voxel_textures.length;\r\n\r\n        if (toString.call(faces) == \"[object Array]\")\r\n            Voxels.voxel_textures.push(faces);\r\n        else if (toString.call(faces) == \"[object Number]\")\r\n            Voxels.voxel_textures.push([faces, faces, faces, faces, faces, faces]);\r\n\r\n        return index;\r\n    },\r\n\r\n    obj_push_data: function(obj, y, z, data)\r\n    {\r\n        if (obj.dims[0] == data.length)\r\n        {\r\n            for (var i = 0; i < data.length; ++i)\r\n            {\r\n                var tmp = [];\r\n\r\n                // Format: [x, y, z, voxel_texture_id]\r\n                tmp.push(i - obj.center[0]);\r\n                tmp.push(y - obj.center[1]);\r\n                tmp.push(z - obj.center[2]);\r\n                tmp.push(data[i]);\r\n\r\n                obj.data.push(tmp);\r\n            }\r\n        }\r\n    },\r\n\r\n    wall_ox: function(map, point, width, height, texture_id)\r\n    {\r\n        var mx = point[0];\r\n\r\n        for (var mz = point[2]; mz < point[2] + height; mz++)\r\n        {\r\n            for (var my = point[1]; my < point[1] + width; my++)\r\n            {\r\n                if (mx >= 0 && my >= 0 && mz >= 0 &&\r\n                    mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2])\r\n                {\r\n                    var index = Common.get_map_index(map, mx, my, mz);\r\n                    map.data[index] = texture_id;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    wall_oy: function(map, point, width, height, texture_id)\r\n    {\r\n        var my = point[1];\r\n\r\n        for (var mz = point[2]; mz < point[2] + height; mz++)\r\n        {\r\n            for (var mx = point[0]; mx < point[0] + width; mx++)\r\n            {\r\n                if (mx >= 0 && my >= 0 && mz >= 0 &&\r\n                    mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2])\r\n                {\r\n                    var index = Common.get_map_index(map, mx, my, mz);\r\n                    map.data[index] = texture_id;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    wall_oz: function(map, point, width, height, texture_id)\r\n    {\r\n        var mz = point[2];\r\n\r\n        for (var my = point[1]; my < point[1] + height; my++)\r\n        {\r\n            for (var mx = point[0]; mx < point[0] + width; mx++)\r\n            {\r\n                if (mx >= 0 && my >= 0 && mz >= 0 &&\r\n                    mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2])\r\n                {\r\n                    var index = Common.get_map_index(map, mx, my, mz);\r\n                    map.data[index] = texture_id;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    valid_voxel: function(map, x, y, z) {\r\n        return (x >= 0 && x < map.dims[0] && y >= 0 && y < map.dims[1] && z >= 0 && z < map.dims[2]);\r\n    },\r\n\r\n    brush_old: function(map, point, dims, texture_id)\r\n    {\r\n        for (var mz = point[2]; mz < point[2] + dims[2]; mz++)\r\n        {\r\n            for (var my = point[1]; my < point[1] + dims[1]; my++)\r\n            {\r\n                for (var mx = point[0]; mx < point[0] + dims[0]; mx++)\r\n                {\r\n                    if (Common.valid_voxel(map, mx, my, mz))\r\n                    {\r\n                        var index = Common.get_map_index(map, mx, my, mz);\r\n                        map.data[index] = texture_id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    brush: function(map, start, end, texture_id, paint)\r\n    {\r\n        paint = paint ? true : false;\r\n\r\n        var sx = start[0];\r\n        var sy = start[1];\r\n        var sz = start[2];\r\n\r\n        var ex = end[0];\r\n        var ey = end[1];\r\n        var ez = end[2];\r\n\r\n        var tmp = 0;\r\n\r\n        if (ex < sx) { tmp = sx; sx = ex; ex = tmp; }\r\n        if (ey < sy) { tmp = sy; sy = ey; ey = tmp; }\r\n        if (ez < sz) { tmp = sz; sz = ez; ez = tmp; }\r\n\r\n        for (var mz = sz; mz <= ez; mz++)\r\n        {\r\n            for (var my = sy; my <= ey; my++)\r\n            {\r\n                for (var mx = sx; mx <= ex; mx++)\r\n                {\r\n                    if (Common.valid_voxel(map, mx, my, mz))\r\n                    {\r\n                        var index = Common.get_map_index(map, mx, my, mz);\r\n\r\n                        if (paint)\r\n                        {\r\n                            if (map.data[index])\r\n                                map.data[index] = texture_id;\r\n                        }\r\n                        else\r\n                            map.data[index] = texture_id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @param {vec3} p\r\n     * @param {array} rotation A vector containing multiple rotations.\r\n     *\r\n     * @return {vec3}\r\n     */\r\n    voxel_object_space_rotation: function(p, rotation)\r\n    {\r\n        var res = [p[0], p[1], p[2]];\r\n\r\n        if (rotation)\r\n        {\r\n            rotation.forEach(function(index)\r\n            {\r\n                var rotation = Common.voxel_rotations[index];\r\n                var tmp = [res[0], res[1], res[2]];\r\n\r\n                res[0] = tmp[rotation[0]] * rotation[3];\r\n                res[1] = tmp[rotation[1]] * rotation[4];\r\n                res[2] = tmp[rotation[2]] * rotation[5];\r\n            });\r\n        }\r\n\r\n        return res;\r\n    },\r\n\r\n    map_add_object: function(map, pos, object, rotation, texture_id)\r\n    {\r\n        object.data.forEach(function(voxel)\r\n        {\r\n            var rv = Common.voxel_object_space_rotation(voxel, rotation);\r\n\r\n            var mx = pos[0] + rv[0];\r\n            var my = pos[1] + rv[1];\r\n            var mz = pos[2] + rv[2];\r\n\r\n            if (mx >= 0 && my >= 0 && mz >= 0 &&\r\n                mx < map.dims[0] && my < map.dims[1] && mz < map.dims[2])\r\n            {\r\n                var index = Common.get_map_index(map, mx, my, mz);\r\n                map.data[index] = (voxel[3] >= 0) && texture_id ? texture_id : voxel[3];\r\n            }\r\n        });\r\n    },\r\n\r\n    float_snap: function(v)\r\n    {\r\n        var epsilon = 0.00000001;\r\n        var s = v < 0 ? -1 : 1;\r\n        var a = Math.abs(v);\r\n        var f = Math.floor(a);\r\n        var c = Math.ceil(a);\r\n\r\n        if (a - f < epsilon)\r\n            return f * s;\r\n        else if (c - a < epsilon)\r\n            return c * s;\r\n\r\n        return v;\r\n    },\r\n\r\n    get_voxel: function(map, point)\r\n    {\r\n        var x = Math.floor(point[0]);\r\n        var y = Math.floor(point[1]);\r\n        var z = Math.floor(point[2]);\r\n\r\n        if (map.wrap[0])\r\n        {\r\n            x %= map.dims[0];\r\n\r\n            if (x < 0)\r\n                x += map.dims[0];\r\n        }\r\n        else if (x < 0 || x >= map.dims[0])\r\n            return [-1, -1, -1];\r\n\r\n        if (map.wrap[1])\r\n        {\r\n            y %= map.dims[1];\r\n\r\n            if (y < 0)\r\n                y += map.dims[1];\r\n        }\r\n        else if (y < 0 || y >= map.dims[1])\r\n            return [-1, -1, -1];\r\n\r\n        if (map.wrap[2])\r\n        {\r\n            z %= map.dims[2];\r\n\r\n            if (z < 0)\r\n                z += map.dims[2];\r\n        }\r\n        else if (z < 0 || z >= map.dims[2])\r\n            return [-1, -1, -1];\r\n\r\n        return [x, y, z];\r\n    },\r\n\r\n    sample_texture: function(texture_data, sampler, u, v, buffer)\r\n    {\r\n        u += 0.00001;\r\n        v += 0.00001;\r\n\r\n        if (u >= 1) u = 0.9999999999;\r\n        if (v >= 1) v = 0.9999999999;\r\n\r\n        var tex_x = (u * sampler.tex_width) | 0;\r\n        var tex_y = ((1 - v) * sampler.tex_height) | 0;\r\n        var pointer = sampler.tex_pointer + ((tex_y << sampler.tex_width_shift | tex_x) << 2);\r\n\r\n        buffer[0] = texture_data[pointer + 0];\r\n        buffer[1] = texture_data[pointer + 1];\r\n        buffer[2] = texture_data[pointer + 2];\r\n    },\r\n\r\n    sample_texture_filtering: function(texture_data, sampler, u, v, buffer)\r\n    {\r\n        u += 0.00001;\r\n        v += 0.00001;\r\n\r\n        if (u >= 1) u = 0.9999999999;\r\n        if (v >= 1) v = 0.9999999999;\r\n\r\n        var tex_xf = u * sampler.tex_width;\r\n        var tex_yf = (1 - v) * sampler.tex_height;\r\n\r\n        var tex_xstart = tex_xf | 0;\r\n        var tex_ystart = tex_yf | 0;\r\n\r\n        var tex_xend = tex_xstart + 1;\r\n        var tex_yend = tex_ystart + 1;\r\n\r\n        if (tex_xend >= sampler.tex_width) tex_xend = sampler.tex_width - 1;\r\n        if (tex_yend >= sampler.tex_height) tex_yend = sampler.tex_height - 1;\r\n\r\n        var s = tex_xf % 1;\r\n        var t = tex_yf % 1;\r\n\r\n        var c0 = tex_ystart << sampler.tex_width_shift;\r\n        var c1 = tex_yend << sampler.tex_width_shift;\r\n\r\n        var pointer_sample_0 = sampler.tex_pointer + ((c0 | tex_xstart) << 2);\r\n        var pointer_sample_1 = sampler.tex_pointer + ((c0 | tex_xend) << 2);\r\n        var pointer_sample_2 = sampler.tex_pointer + ((c1 | tex_xstart) << 2);\r\n        var pointer_sample_3 = sampler.tex_pointer + ((c1 | tex_xend) << 2);\r\n\r\n        color_0[0] = texture_data[pointer_sample_0 + 0];\r\n        color_0[1] = texture_data[pointer_sample_0 + 1];\r\n        color_0[2] = texture_data[pointer_sample_0 + 2];\r\n\r\n        color_1[0] = texture_data[pointer_sample_1 + 0];\r\n        color_1[1] = texture_data[pointer_sample_1 + 1];\r\n        color_1[2] = texture_data[pointer_sample_1 + 2];\r\n\r\n        color_2[0] = texture_data[pointer_sample_2 + 0];\r\n        color_2[1] = texture_data[pointer_sample_2 + 1];\r\n        color_2[2] = texture_data[pointer_sample_2 + 2];\r\n\r\n        color_3[0] = texture_data[pointer_sample_3 + 0];\r\n        color_3[1] = texture_data[pointer_sample_3 + 1];\r\n        color_3[2] = texture_data[pointer_sample_3 + 2];\r\n\r\n        var rs = 1 - s;\r\n        var rt = 1 - t;\r\n\r\n        color_4[0] = color_0[0] * rs + color_1[0] * s;\r\n        color_4[1] = color_0[1] * rs + color_1[1] * s;\r\n        color_4[2] = color_0[2] * rs + color_1[2] * s;\r\n\r\n        color_5[0] = color_2[0] * rs + color_3[0] * s;\r\n        color_5[1] = color_2[1] * rs + color_3[1] * s;\r\n        color_5[2] = color_2[2] * rs + color_3[2] * s;\r\n\r\n        buffer[0] = color_4[0] * rt + color_5[0] * t;\r\n        buffer[1] = color_4[1] * rt + color_5[1] * t;\r\n        buffer[2] = color_4[2] * rt + color_5[2] * t;\r\n    }\r\n};\r\n\r\nexport default Common;",
    "import Common from 'common';\r\nimport TextureAtlas from 'assets/textures/voxel.json';\r\n\r\nimport TestRoom from './scenes/test_room';\r\nimport Matrix from './scenes/matrix';\r\nimport Hallway from './scenes/hallway';\r\nimport VoxelLandscape from './scenes/landscape';\r\nimport SpaceStation from './scenes/space_station';\r\n\r\nvar scenes = [\r\n    TestRoom,\r\n    Matrix,\r\n    Hallway,\r\n    VoxelLandscape,\r\n    SpaceStation\r\n];\r\n\r\nvar Voxels =\r\n{\r\n    c$: {},\r\n\r\n    width: 800,\r\n    height: 400,\r\n    scale: 1,\r\n\r\n    inv_width: 0,\r\n    inv_height: 0,\r\n    prev_timestamp: 0,\r\n\r\n    scene: null,\r\n    free_mode: false,\r\n\r\n    input: {\r\n        keys: {\r\n            left: false,\r\n            right: false,\r\n            forward: false,\r\n            backward: false,\r\n            up: false,\r\n            down: false,\r\n            turn_left: false,\r\n            turn_right: false\r\n        }\r\n    },\r\n\r\n    // Camera initial orientation: x right, y forward, z up\r\n    camera: {\r\n        fov: 50,\r\n        aspect: 1,\r\n        fova: 1,\r\n\r\n        key_speed: 1,\r\n        mouse_speed: 1,\r\n        rotation_speed: 10,\r\n\r\n        start_position: [0.0, 0.0, 0.0],\r\n        start_rotation: [0, 0, 0],\r\n\r\n        position: [0, 0, 0],\r\n        rotation: [0, 0, 0],\r\n\r\n        // Screen plane offset from the camera position (y axis)\r\n        // used to generate the world space ray vector.\r\n        f_near: 0,\r\n        sdx: 0,\r\n        sdy: 0,\r\n\r\n        voxel: [0, 0, 0],\r\n        offset: [0, 0, 0]\r\n    },\r\n\r\n    ray: {\r\n        vector: [1, 0, 0],\r\n        dx: 0,\r\n        dy: 0,\r\n        dz: 0,\r\n        incr_x: 1,\r\n        incr_y: 1,\r\n        incr_z: 1,\r\n        face_x: -1,\r\n        face_y: -1,\r\n        face_z: -1,\r\n        start_tx: 0,\r\n        start_ty: 0,\r\n        start_tz: 0,\r\n\r\n        start_voxel: [0, 0, 0]\r\n    },\r\n\r\n    base_color: [0, 0, 0],\r\n    clip_count: 32,\r\n    clip_dist: 32,\r\n    one_over_clip_dist: 1,\r\n    buffer: null,\r\n\r\n    map: {\r\n        // power of 2 required\r\n        dims: [32, 32, 32],\r\n\r\n        shift_z: 10,\r\n        shift_y: 5,\r\n\r\n        data: null,\r\n        wrap: [false, false, false],\r\n    },\r\n\r\n    intersection: {\r\n        value: -1,\r\n        face: 0,\r\n        t: 0,\r\n        ip: [0, 0, 0]\r\n    },\r\n\r\n    // +x, -x, +y, -y, +z, -z\r\n    // Order: left (0), right (1), front (2), back (3), bottom (4), top (5)\r\n    light: [.5, .6, .85, .4, .2, .95],\r\n    light_mult: 1,\r\n\r\n    // x (left, right) -> u = y, v = z\r\n    // y (front, back) -> u = x, v = z\r\n    // z (top, bottom) -> u = x, v = y\r\n\r\n    texture_sampler: {\r\n        use_blank_color: true,\r\n        background_color: [0, 0, 0],\r\n        default_color: [0, 0, 0],\r\n        packed_color: 0,\r\n        width: 16,\r\n        height: 16,\r\n        stride: 16,\r\n        uv: [\r\n            [1, 2], [1, 2], // left-right\r\n            [0, 2], [0, 2], // front-back\r\n            [0, 1], [0, 1]  // bottom-top\r\n        ]\r\n    },\r\n\r\n    voxel_textures: [\r\n        null,\r\n        [0, 0, 0, 0, 0, 0],\r\n    ],\r\n\r\n    voxel_objects: [],\r\n\r\n    debug: {\r\n        enable: false,\r\n        x: 343,\r\n        y: 335\r\n    }\r\n};\r\n\r\nvar screen_console = document.getElementById('console');\r\nvar screen = document.getElementById('3dbase');\r\nvar screen_ctx = screen.getContext('2d');\r\n\r\n// ----------------------------------------------------------------------------------\r\n// -- Event listeners.\r\n// ----------------------------------------------------------------------------------\r\n\r\nfunction get_screen_point(event)\r\n{\r\n    var rect = screen.getBoundingClientRect();\r\n    var point = [0, 0];\r\n\r\n    point[0] = Math.floor(event.clientX - rect.left);\r\n    point[1] = Math.floor(event.clientY - rect.top);\r\n\r\n    return point;\r\n};\r\n\r\nvar root = document.getElementById('root');\r\n\r\nroot.addEventListener('keydown', function(event)\r\n{\r\n    if (event.code == 'KeyA')\r\n        Voxels.input.keys.left = true;\r\n    else if (event.code == 'KeyD')\r\n        Voxels.input.keys.right = true;\r\n    else if (event.code == 'KeyW')\r\n        Voxels.input.keys.forward = true;\r\n    else if (event.code == 'KeyS')\r\n        Voxels.input.keys.backward = true;\r\n    else if (event.code == 'Space')\r\n        Voxels.input.keys.up = true;\r\n    else if (event.code == 'ShiftLeft')\r\n        Voxels.input.keys.down = true;\r\n    else if (event.code == 'KeyQ')\r\n        Voxels.input.keys.turn_left = true;\r\n    else if (event.code == 'KeyE')\r\n        Voxels.input.keys.turn_right = true;\r\n});\r\n\r\nroot.addEventListener('keyup', function(event)\r\n{\r\n    if (event.code == 'KeyA')\r\n        Voxels.input.keys.left = false;\r\n    else if (event.code == 'KeyD')\r\n        Voxels.input.keys.right = false;\r\n    else if (event.code == 'KeyW')\r\n        Voxels.input.keys.forward = false;\r\n    else if (event.code == 'KeyS')\r\n        Voxels.input.keys.backward = false;\r\n    else if (event.code == 'Space')\r\n        Voxels.input.keys.up = false;\r\n    else if (event.code == 'ShiftLeft')\r\n        Voxels.input.keys.down = false;\r\n    else if (event.code == 'KeyQ')\r\n        Voxels.input.keys.turn_left = false;\r\n    else if (event.code == 'KeyE')\r\n        Voxels.input.keys.turn_right = false;\r\n});\r\n\r\nscreen.addEventListener('mousemove', function(event)\r\n{\r\n    var point = get_screen_point(event);\r\n});\r\n\r\nfunction process_input()\r\n{\r\n    if (!Voxels.free_mode)\r\n        return;\r\n\r\n    var forward = [0, 1, 0];\r\n    var up = [0, 0, 1];\r\n\r\n    Common.rotate_x(forward, Common.deg2rad(Voxels.camera.rotation[0]));\r\n    Common.rotate_z(forward, Common.deg2rad(Voxels.camera.rotation[2]));\r\n\r\n    var side = Common.vec3_cross(forward, up);\r\n\r\n    // Common.vec3_normalize(forward);\r\n    // Common.vec3_normalize(side);\r\n\r\n    if (Voxels.input.keys.forward)\r\n    {\r\n        Voxels.camera.position[0] += Voxels.camera.key_speed * forward[0];\r\n        Voxels.camera.position[1] += Voxels.camera.key_speed * forward[1];\r\n        Voxels.camera.position[2] += Voxels.camera.key_speed * forward[2];\r\n    }\r\n\r\n    if (Voxels.input.keys.backward)\r\n    {\r\n        Voxels.camera.position[0] -= Voxels.camera.key_speed * forward[0];\r\n        Voxels.camera.position[1] -= Voxels.camera.key_speed * forward[1];\r\n        Voxels.camera.position[2] -= Voxels.camera.key_speed * forward[2];\r\n    }\r\n\r\n    if (Voxels.input.keys.left)\r\n    {\r\n        Voxels.camera.position[0] -= Voxels.camera.key_speed * side[0];\r\n        Voxels.camera.position[1] -= Voxels.camera.key_speed * side[1];\r\n        Voxels.camera.position[2] -= Voxels.camera.key_speed * side[2];\r\n    }\r\n\r\n    if (Voxels.input.keys.right)\r\n    {\r\n        Voxels.camera.position[0] += Voxels.camera.key_speed * side[0];\r\n        Voxels.camera.position[1] += Voxels.camera.key_speed * side[1];\r\n        Voxels.camera.position[2] += Voxels.camera.key_speed * side[2];\r\n    }\r\n\r\n    if (Voxels.input.keys.up) {\r\n        Voxels.camera.position[2] += Voxels.camera.key_speed;\r\n    }\r\n\r\n    if (Voxels.input.keys.down) {\r\n        Voxels.camera.position[2] -= Voxels.camera.key_speed;\r\n    }\r\n\r\n    if (Voxels.input.keys.turn_left) {\r\n        Voxels.camera.rotation[2] += Voxels.camera.rotation_speed;\r\n    }\r\n\r\n    if (Voxels.input.keys.turn_right) {\r\n        Voxels.camera.rotation[2] -= Voxels.camera.rotation_speed;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------------\r\n// -- Setup routines.\r\n// ----------------------------------------------------------------------------------\r\n\r\nfunction set_scene(scene)\r\n{\r\n    Voxels.scene = scene;\r\n    scene.setup(Voxels);\r\n\r\n    if (Voxels.scale > 1)\r\n    {\r\n        Voxels.width = (Voxels.width / Voxels.scale) | 0;\r\n        Voxels.height = (Voxels.height / Voxels.scale) | 0;\r\n\r\n        screen.style.transformOrigin = \"0 0\";\r\n        screen.style.transform = `scale(${Voxels.scale})`;\r\n    }\r\n\r\n    console.log(Voxels.width, Voxels.height);\r\n\r\n    screen.width = Voxels.width;\r\n    screen.height = Voxels.height;\r\n\r\n    // ----------------------------------------------------------------------------------\r\n    // -- Camera setup.\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    Voxels.inv_width = 1.0 / Voxels.width;\r\n    Voxels.inv_height = 1.0 / Voxels.height;\r\n    Voxels.one_over_clip_dist = 1.0 / Voxels.clip_dist;\r\n\r\n    Voxels.camera.position[0] = Voxels.camera.start_position[0];\r\n    Voxels.camera.position[1] = Voxels.camera.start_position[1];\r\n    Voxels.camera.position[2] = Voxels.camera.start_position[2];\r\n\r\n    Voxels.camera.aspect = Voxels.width / Voxels.height;\r\n    Voxels.camera.one_over_aspect = 1.0 / Voxels.camera.aspect;\r\n    Voxels.camera.sdx = 2.0 / Voxels.width;\r\n    Voxels.camera.sdy = 2.0 / Voxels.height;\r\n    // Voxels.camera.f_near = 1.0 / Math.tan(Common.deg2rad(Voxels.camera.fov * 0.5));\r\n    Voxels.camera.f_near = 1.0;\r\n    Voxels.camera.fova = Math.tan(Common.deg2rad(Voxels.camera.fov * 0.5));\r\n\r\n    // ----------------------------------------------------------------------------------\r\n    // -- Screen buffer setup.\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    Voxels.buffer = screen_ctx.createImageData(Voxels.width, Voxels.height);\r\n\r\n    for (var i = 0; i < Voxels.width * Voxels.height; ++i)\r\n    {\r\n        Voxels.buffer.data[i * 4 + 0] = 0;\r\n        Voxels.buffer.data[i * 4 + 1] = 0;\r\n        Voxels.buffer.data[i * 4 + 2] = 0;\r\n        Voxels.buffer.data[i * 4 + 3] = 255;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------\r\n    // -- Map generation.\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    generate_objects(Voxels);\r\n\r\n    Voxels.map.data = new Array(Voxels.map.dims[0] * Voxels.map.dims[1] * Voxels.map.dims[2]);\r\n\r\n    scene.generate(Voxels);\r\n}\r\n\r\n// TODO(gabic): Sa scot chestiile astea.\r\nfunction generate_objects(Voxels)\r\n{\r\n    Voxels.c$.OBJ_CUBE = 0;\r\n    Voxels.c$.OBJ_HALL_DECO_0 = 1;\r\n    Voxels.c$.OBJ_HALL_DECO_1 = 2;\r\n    Voxels.c$.OBJ_HALL_DECO_2 = 3;\r\n    Voxels.c$.OBJ_HALL_DECO_3 = 4;\r\n    Voxels.c$.OBJ_HALL_DECO_4 = 5;\r\n    Voxels.c$.OBJ_HALL_DECO_5 = 6;\r\n    Voxels.c$.OBJ_HALL_WINDOW_0 = 7;\r\n    Voxels.c$.OBJ_HALL_WINDOW_1 = 8;\r\n    Voxels.c$.OBJ_HALL_WINDOW_2 = 9;\r\n    Voxels.c$.OBJ_HALL_COLUMN_0 = 10;\r\n    Voxels.c$.OBJ_HALL_COLUMN_1 = 11;\r\n\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    var obj = {\r\n        name: 'Matrix cube',\r\n        dims: [3, 3, 3],\r\n        center: [1, 1, 1],\r\n        data: []\r\n    };\r\n\r\n    var voxel_texture_index = Voxels.voxel_textures.length;\r\n\r\n    // Textures.\r\n    // matrix cube base\r\n    var id0 = Common.add_voxel_texture(Voxels, [7, 7, 7, 7, 0, 7]);\r\n    // matrix cube top\r\n    var id1 = Common.add_voxel_texture(Voxels, [8, 8, 8, 8, 7, 7]);\r\n    // matrix cube bottom\r\n    var id2 = Common.add_voxel_texture(Voxels, [9, 9, 9, 9, 7, 7]);\r\n\r\n    // Voxels.\r\n    Common.obj_push_data(obj, 0, 0, [id2, id2, id2]);\r\n    Common.obj_push_data(obj, 0, 1, [id0, -1, id0]);\r\n    Common.obj_push_data(obj, 0, 2, [id1, id1, id1]);\r\n    Common.obj_push_data(obj, 1, 0, [id2, -1, id2]);\r\n    Common.obj_push_data(obj, 1, 1, [-1, -1, -1]);\r\n    Common.obj_push_data(obj, 1, 2, [id1, -1, id1]);\r\n    Common.obj_push_data(obj, 2, 0, [id2, id2, id2]);\r\n    Common.obj_push_data(obj, 2, 1, [id0, -1, id0]);\r\n    Common.obj_push_data(obj, 2, 2, [id1, id1, id1]);\r\n\r\n    Voxels.voxel_objects.push(obj);\r\n\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    obj = {\r\n        name: 'Hall decoration 0',\r\n        dims: [6, 1, 15],\r\n        center: [0, 0, 0],\r\n        data: []\r\n    };\r\n\r\n    // Textures.\r\n    // Voxels.\r\n    Common.obj_push_data(obj, 0, 0, [0, -1, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 1, [0, -1, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 2, [0, -1, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 3, [0, 0, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 4, [0, 0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 5, [0, -1, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 6, [0, -1, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 7, [0, -1, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 8, [0, -1, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 9, [0, -1, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 10, [0, 0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 11, [-1, 0, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 12, [-1, -1, 0, 0, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 13, [-1, 0, -1, 0, 0, -1]);\r\n    Common.obj_push_data(obj, 0, 14, [0, -1, -1, -1, 0, 0]);\r\n\r\n    Voxels.voxel_objects.push(obj);\r\n\r\n    // ----------------------------------------------------------------------------------\r\n\r\n    obj = {\r\n        name: 'Hall decoration 1',\r\n        dims: [5, 1, 15],\r\n        center: [0, 0, 0],\r\n        data: []\r\n    };\r\n\r\n    // Textures.\r\n    // Voxels.\r\n    Common.obj_push_data(obj, 0, 0, [0, 0, 0, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 1, [0, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 2, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 3, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 4, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 5, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 6, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 7, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 8, [0, -1, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 9, [0, 0, -1, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 10, [0, 0, 0, -1, -1]);\r\n    Common.obj_push_data(obj, 0, 11, [0, -1, 0, 0, -1]);\r\n    Common.obj_push_data(obj, 0, 12, [0, -1, -1, 0, 0]);\r\n    Common.obj_push_data(obj, 0, 13, [0, 0, -1, -1, 0]);\r\n    Common.obj_push_data(obj, 0, 14, [0, 0, 0, 0, 0]);\r\n\r\n    Voxels.voxel_objects.push(obj);\r\n}\r\n\r\nfunction valid_voxel(x, y, z) {\r\n    return (x >= 0 && x < Voxels.map.dims[0] && y >= 0 && y < Voxels.map.dims[1] && z >= 0 && z < Voxels.map.dims[2]);\r\n}\r\n\r\nfunction wrap_coord_v3(v)\r\n{\r\n    if (Voxels.map.wrap[0])\r\n        v[0] = v[0] < 0 ? Voxels.map.dims[0] + v[0] : v[0] % Voxels.map.dims[0];\r\n\r\n    if (Voxels.map.wrap[1])\r\n        v[1] = v[1] < 0 ? Voxels.map.dims[1] + v[1] : v[1] % Voxels.map.dims[1];\r\n\r\n    if (Voxels.map.wrap[2])\r\n        v[2] = v[2] < 0 ? Voxels.map.dims[2] + v[2] : v[2] % Voxels.map.dims[2];\r\n}\r\n\r\nfunction wrap_coord_x(x)\r\n{\r\n    if (Voxels.map.wrap[0])\r\n        x = x < 0 ? Voxels.map.dims[0] + x : x % Voxels.map.dims[0];\r\n\r\n    return x;\r\n}\r\n\r\nfunction wrap_coord_y(y)\r\n{\r\n    if (Voxels.map.wrap[1])\r\n        y = y < 0 ? Voxels.map.dims[1] + y : y % Voxels.map.dims[1];\r\n\r\n    return y;\r\n}\r\n\r\nfunction wrap_coord_z(z)\r\n{\r\n    if (Voxels.map.wrap[2])\r\n        z = z < 0 ? Voxels.map.dims[2] + z : z % Voxels.map.dims[2];\r\n\r\n    return z;\r\n}\r\n\r\nfunction init_camera()\r\n{\r\n    wrap_coord_v3(Voxels.camera.position);\r\n\r\n    Voxels.camera.voxel[0] = Voxels.camera.position[0] | 0;\r\n    Voxels.camera.voxel[1] = Voxels.camera.position[1] | 0;\r\n    Voxels.camera.voxel[2] = Voxels.camera.position[2] | 0;\r\n\r\n    if (Voxels.camera.voxel[0] < 0)\r\n        Voxels.camera.voxel[0]--;\r\n\r\n    if (Voxels.camera.voxel[1] < 0)\r\n        Voxels.camera.voxel[1]--;\r\n\r\n    if (Voxels.camera.voxel[2] < 0)\r\n        Voxels.camera.voxel[2]--;\r\n\r\n    Voxels.camera.offset[0] = Voxels.camera.position[0] - Voxels.camera.voxel[0];\r\n    Voxels.camera.offset[1] = Voxels.camera.position[1] - Voxels.camera.voxel[1];\r\n    Voxels.camera.offset[2] = Voxels.camera.position[2] - Voxels.camera.voxel[2];\r\n}\r\n\r\nfunction ray_setup()\r\n{\r\n    Voxels.ray.start_voxel[0] = Voxels.camera.voxel[0];\r\n    Voxels.ray.start_voxel[1] = Voxels.camera.voxel[1];\r\n    Voxels.ray.start_voxel[2] = Voxels.camera.voxel[2];\r\n\r\n    Voxels.ray.dx = 1.0 / Voxels.ray.vector[0];\r\n    Voxels.ray.dy = 1.0 / Voxels.ray.vector[1];\r\n    Voxels.ray.dz = 1.0 / Voxels.ray.vector[2];\r\n\r\n    Voxels.ray.dx = Voxels.ray.dx < 0 ? -Voxels.ray.dx : Voxels.ray.dx;\r\n    Voxels.ray.dy = Voxels.ray.dy < 0 ? -Voxels.ray.dy : Voxels.ray.dy;\r\n    Voxels.ray.dz = Voxels.ray.dz < 0 ? -Voxels.ray.dz : Voxels.ray.dz;\r\n\r\n    Voxels.ray.face_x = 0;\r\n    Voxels.ray.face_y = 2;\r\n    Voxels.ray.face_z = 4;\r\n\r\n    Voxels.ray.incr_x = 1;\r\n    Voxels.ray.incr_y = 1;\r\n    Voxels.ray.incr_z = 1;\r\n\r\n    var offset_x = Voxels.camera.offset[0];\r\n    var offset_y = Voxels.camera.offset[1];\r\n    var offset_z = Voxels.camera.offset[2];\r\n\r\n    if (Voxels.ray.vector[0] < 0)\r\n    {\r\n        Voxels.ray.incr_x = -1;\r\n        Voxels.ray.face_x = 1;\r\n\r\n        if (offset_x == 0)\r\n        {\r\n            offset_x = 1;\r\n            Voxels.ray.start_voxel[0]--;\r\n        }\r\n    }\r\n    else\r\n        offset_x = 1 - offset_x;\r\n\r\n    if (Voxels.ray.vector[1] < 0)\r\n    {\r\n        Voxels.ray.incr_y = -1;\r\n        Voxels.ray.face_y = 3;\r\n\r\n        if (offset_y == 0)\r\n        {\r\n            offset_y = 1;\r\n            Voxels.ray.start_voxel[1]--;\r\n        }\r\n    }\r\n    else\r\n        offset_y = 1 - offset_y;\r\n\r\n    if (Voxels.ray.vector[2] < 0)\r\n    {\r\n        Voxels.ray.incr_z = -1;\r\n        Voxels.ray.face_z = 5;\r\n\r\n        if (offset_z == 0)\r\n        {\r\n            offset_z = 1;\r\n            Voxels.ray.start_voxel[2]--;\r\n        }\r\n    }\r\n    else\r\n        offset_z = 1 - offset_z;\r\n\r\n    Voxels.ray.start_tx = Voxels.ray.dx * offset_x;\r\n    Voxels.ray.start_ty = Voxels.ray.dy * offset_y;\r\n    Voxels.ray.start_tz = Voxels.ray.dz * offset_z;\r\n\r\n    if (Voxels.ray.vector[0] == 0)\r\n        Voxels.ray.start_tx = Infinity;\r\n\r\n    if (Voxels.ray.vector[1] == 0)\r\n        Voxels.ray.start_ty = Infinity;\r\n\r\n    if (Voxels.ray.vector[2] == 0)\r\n        Voxels.ray.start_tz = Infinity;\r\n}\r\n\r\nfunction render(timestamp)\r\n{\r\n    var delta = timestamp - Voxels.prev_timestamp;\r\n    Voxels.prev_timestamp = timestamp;\r\n\r\n    var t0 = performance.now();\r\n\r\n    if (Voxels.scene)\r\n    {\r\n        var world_point = [0, 0, 0];\r\n        var pixel_index = 0;\r\n        var dy = 0;\r\n\r\n        Voxels.scene.update(Voxels, timestamp, delta);\r\n\r\n        process_input();\r\n        init_camera();\r\n\r\n        // ----------------------------------------------------------------------------------\r\n        // -- Rasterization\r\n        // ----------------------------------------------------------------------------------\r\n        // Cast a ray through every pixel on the screen.\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        for (var y = 0; y < Voxels.height; ++y)\r\n        {\r\n            var dx = 0;\r\n\r\n            for (var x = 0; x < Voxels.width; ++x)\r\n            {\r\n                Voxels.buffer.data[pixel_index + 0] = Voxels.texture_sampler.background_color[0];\r\n                Voxels.buffer.data[pixel_index + 1] = Voxels.texture_sampler.background_color[1];\r\n                Voxels.buffer.data[pixel_index + 2] = Voxels.texture_sampler.background_color[2];\r\n\r\n                Voxels.ray.vector[0] = Voxels.camera.fova * Voxels.camera.aspect * (dx - 1);\r\n                Voxels.ray.vector[1] = Voxels.camera.f_near;\r\n                Voxels.ray.vector[2] = (1 - dy) * Voxels.camera.fova;\r\n\r\n                Common.rotate_x(Voxels.ray.vector, Common.deg2rad(Voxels.camera.rotation[0]));\r\n                Common.rotate_z(Voxels.ray.vector, Common.deg2rad(Voxels.camera.rotation[2]));\r\n\r\n                ray_setup();\r\n\r\n                // ----------------------------------------------------------------------------------\r\n                // -- Ray traversal.\r\n                // ----------------------------------------------------------------------------------\r\n\r\n                var vx = Voxels.ray.start_voxel[0];\r\n                var vy = Voxels.ray.start_voxel[1];\r\n                var vz = Voxels.ray.start_voxel[2];\r\n\r\n                var tx = Voxels.ray.start_tx;\r\n                var ty = Voxels.ray.start_ty;\r\n                var tz = Voxels.ray.start_tz;\r\n\r\n                var face = tx < ty ? Voxels.ray.face_x : Voxels.ray.face_y;\r\n                var count = 0;\r\n                var t = 0;\r\n                var voxel_index = -1;\r\n\r\n                Voxels.intersection.value = -1;\r\n\r\n                while (true)\r\n                {\r\n                    count++;\r\n\r\n                    if (count >= Voxels.clip_count)\r\n                        break;\r\n\r\n                    if (tx < ty)\r\n                    {\r\n                        if (tx < tz)\r\n                        {\r\n                            t = tx;\r\n                            tx += Voxels.ray.dx;\r\n                            vx += Voxels.ray.incr_x;\r\n                            face = Voxels.ray.face_x;\r\n                        }\r\n                        else\r\n                        {\r\n                            t = tz;\r\n                            tz += Voxels.ray.dz;\r\n                            vz += Voxels.ray.incr_z;\r\n                            face = Voxels.ray.face_z;\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (ty < tz)\r\n                        {\r\n                            t = ty;\r\n                            ty += Voxels.ray.dy;\r\n                            vy += Voxels.ray.incr_y;\r\n                            face = Voxels.ray.face_y;\r\n                        }\r\n                        else\r\n                        {\r\n                            t = tz;\r\n                            tz += Voxels.ray.dz;\r\n                            vz += Voxels.ray.incr_z;\r\n                            face = Voxels.ray.face_z;\r\n                        }\r\n                    }\r\n\r\n                    if (t >= Voxels.clip_dist)\r\n                        break;\r\n\r\n                    vx = wrap_coord_x(vx);\r\n                    vy = wrap_coord_y(vy);\r\n                    vz = wrap_coord_z(vz);\r\n\r\n                    voxel_index = (vz << Voxels.map.shift_z) | (vy << Voxels.map.shift_y) | vx;\r\n\r\n                    if (valid_voxel(vx, vy, vz) && Voxels.map.data[voxel_index] > 0)\r\n                    {\r\n                        Voxels.intersection.value = Voxels.map.data[voxel_index];\r\n                        Voxels.intersection.face = face;\r\n                        Voxels.intersection.t = t;\r\n\r\n                        Voxels.intersection.ip[0] = Voxels.camera.position[0] + Voxels.intersection.t * Voxels.ray.vector[0];\r\n                        Voxels.intersection.ip[1] = Voxels.camera.position[1] + Voxels.intersection.t * Voxels.ray.vector[1];\r\n                        Voxels.intersection.ip[2] = Voxels.camera.position[2] + Voxels.intersection.t * Voxels.ray.vector[2];\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // ----------------------------------------------------------------------------------\r\n                // -- Pixel color determination.\r\n                // ----------------------------------------------------------------------------------\r\n\r\n                if (Voxels.intersection.value > 0)\r\n                {\r\n                    var out_r = Voxels.texture_sampler.default_color[0];\r\n                    var out_g = Voxels.texture_sampler.default_color[1];\r\n                    var out_b = Voxels.texture_sampler.default_color[2];\r\n                    var out_a = 255;\r\n\r\n                    // Texture sampling.\r\n                    if (!Voxels.texture_sampler.use_blank_color)\r\n                    {\r\n                        // Custom color.\r\n                        if (Voxels.intersection.value & 0xff000000)\r\n                        {\r\n                            out_r = (Voxels.intersection.value & 0x00ff0000) >> 16;\r\n                            out_g = (Voxels.intersection.value & 0x0000ff00) >> 8;\r\n                            out_b = Voxels.intersection.value & 0x000000ff;\r\n                        }\r\n                        // Texture.\r\n                        else\r\n                        {\r\n                            var sampler = Voxels.texture_sampler.uv[Voxels.intersection.face];\r\n\r\n                            var u = Voxels.intersection.ip[sampler[0]] - (Voxels.intersection.ip[sampler[0]] | 0);\r\n                            var v = Voxels.intersection.ip[sampler[1]] - (Voxels.intersection.ip[sampler[1]] | 0);\r\n\r\n                            u = u < 0 ? 1 + u : u;\r\n                            v = v < 0 ? -v : 1 - v;\r\n\r\n                            u = u == 1 ? 0.999999 : u;\r\n                            v = v == 1 ? 0.999999 : v;\r\n\r\n                            var tex_x = (u * Voxels.texture_sampler.width) | 0;\r\n                            var tex_y = (v * Voxels.texture_sampler.height) | 0;\r\n                            // var tex_index = (tex_y * Voxels.texture_sampler.stride + tex_x) << 2;\r\n                            var tex_index = ((tex_y << 4) | tex_x) << 2;\r\n\r\n                            var offset = Voxels.voxel_textures[Voxels.intersection.value][Voxels.intersection.face];\r\n                            var face_pointer = TextureAtlas.offset[offset] + tex_index;\r\n\r\n                            out_r = TextureAtlas.data[face_pointer + 0];\r\n                            out_g = TextureAtlas.data[face_pointer + 1];\r\n                            out_b = TextureAtlas.data[face_pointer + 2];\r\n                            out_a = TextureAtlas.data[face_pointer + 3];\r\n                        }\r\n                    }\r\n\r\n                    if (out_a == 255)\r\n                    {\r\n                        // TODO(gabic): Cazul pentru textura de debug.\r\n                        var t = 1 - Voxels.intersection.t * Voxels.one_over_clip_dist;\r\n                        t *= Voxels.light[Voxels.intersection.face] * Voxels.light_mult;\r\n\r\n                        Voxels.buffer.data[pixel_index + 0] = (out_r * t) | 0;\r\n                        Voxels.buffer.data[pixel_index + 1] = (out_g * t) | 0;\r\n                        Voxels.buffer.data[pixel_index + 2] = (out_b * t) | 0;\r\n                    }\r\n                }\r\n\r\n                dx += Voxels.camera.sdx;\r\n                pixel_index += 4;\r\n            }\r\n\r\n            dy += Voxels.camera.sdy;\r\n        }\r\n    }\r\n\r\n    var t1 = performance.now();\r\n    var frame_ms = t1 - t0;\r\n    var fps = 1000 / frame_ms;\r\n    var name = Voxels.scene ? Voxels.scene.name : 'Unknown';\r\n    var resolution = Voxels.width + 'x' + Voxels.height + ' (x' + Voxels.scale +')';\r\n\r\n    var console_html = '&raquo;&nbsp; '+ name + ' / '+ 'resolution: ' + resolution +' / ms: ' + frame_ms.toFixed(2);\r\n    console_html += ' / ' + 'fps: ' + fps.toFixed(2);\r\n    screen_console.innerHTML = console_html;\r\n\r\n    if (Voxels.buffer)\r\n        screen_ctx.putImageData(Voxels.buffer, 0, 0);\r\n\r\n    window.requestAnimationFrame(render);\r\n}\r\n\r\n// -----------------------------------------------------------\r\n// -- UI events.\r\n// -----------------------------------------------------------\r\n\r\n$(\"#voxels-panel\").on(\"click\", \"#back-to-menu-button\", function(e) {\r\n    window.location.href = \"../index.html\";\r\n});\r\n\r\n$(\"#voxels-panel\").on(\"change\", \"#scene-select\", function(e)\r\n{\r\n    var $target = $(e.target);\r\n    var scene_index = parseInt($target.val());\r\n\r\n    if (scene_index < 0 || scene_index >= scenes.length)\r\n        scene_index = 0;\r\n\r\n    set_scene(scenes[scene_index]);\r\n});\r\n\r\nwindow.requestAnimationFrame(render);\r\n",
    "import Common from 'common';\r\n\r\nvar Hallway =\r\n{\r\n    name: \"Hallway\",\r\n    data: {\r\n        textures: {}\r\n    },\r\n\r\n    xd: Common.TWO_PI / 5000,\r\n    zd: Common.TWO_PI / 800,\r\n    rot_x: Common.TWO_PI / 20000,\r\n    rot_z: Common.TWO_PI / 10000,\r\n\r\n    running: true,\r\n\r\n    camera_circle_rotation: {\r\n        radius: 0.3,\r\n        center_distance: 1,\r\n        point_distance: 0,\r\n        speed: Common.TWO_PI / 10000\r\n    },\r\n\r\n    setup: function(Voxels)\r\n    {\r\n        Voxels.width = 800;\r\n        Voxels.height = 400;\r\n        Voxels.scale = 2;\r\n\r\n        Voxels.map.dims = [32, 32, 32];\r\n        Voxels.map.shift_z = 10;\r\n        Voxels.map.shift_y = 5;\r\n\r\n        Voxels.camera.start_position = [15.5, 0, 5];\r\n        Voxels.camera.start_rotation = [0, 0, 0];\r\n\r\n        // Voxels.camera.rotation[0] = 35;\r\n        // Voxels.camera.rotation[2] = 90;\r\n\r\n        Voxels.map.wrap = [false, true, false];\r\n        Voxels.texture_sampler.use_blank_color = false;\r\n        Voxels.texture_sampler.default_color = [150, 150, 150];\r\n\r\n        Voxels.clip_count = 128;\r\n        Voxels.clip_dist = 80;\r\n\r\n        Voxels.light = [.6, .6, .85, .45, .3, .95],\r\n        Voxels.light_mult = 1.5;\r\n\r\n        this.camera_circle_rotation.point_distance = Math.sqrt(\r\n            this.camera_circle_rotation.radius * this.camera_circle_rotation.radius +\r\n            this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance\r\n        );\r\n    },\r\n\r\n    add_window: function(map, point)\r\n    {\r\n        Common.brush(map, point, [point[0], point[1] + 2, point[2] + 2], 0);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2] + 3],\r\n            [point[0], point[1] + 1, point[2] + 3],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2] - 1],\r\n            [point[0], point[1] + 1, point[2] - 1],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1], point[2] + 1],\r\n            [point[0], point[1] + 2, point[2] + 1],\r\n            Hallway.data.textures.floor_tile_0);\r\n    },\r\n\r\n    add_column_left: function(map, point)\r\n    {\r\n        var end_point = [\r\n            point[0] + 4,\r\n            point[1] + 3,\r\n            point[2] + 10\r\n        ];\r\n\r\n        Common.brush(map, point, end_point, Hallway.data.textures.bricks_1);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 2, point[1] + 0, point[2] + 0],\r\n            [point[0] + 2, point[1] + 0, point[2] + 6],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 2, point[1] + 3, point[2] + 0],\r\n            [point[0] + 2, point[1] + 3, point[2] + 6],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 2, point[1] + 1, point[2] + 6],\r\n            [point[0] + 2, point[1] + 2, point[2] + 6],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 2, point[1] + 1, point[2] + 4],\r\n            [point[0] + 2, point[1] + 2, point[2] + 4],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 2, point[1] + 1, point[2] + 2],\r\n            [point[0] + 2, point[1] + 2, point[2] + 2],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 4, point[1] + 0, point[2] + 0],\r\n            [point[0] + 4, point[1] + 0, point[2] + 10],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 4, point[1] + 3, point[2] + 0],\r\n            [point[0] + 4, point[1] + 3, point[2] + 10],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            point,\r\n            [point[0] + 4, point[1] + 3, point[2]],\r\n            Hallway.data.textures.bricks_1_bottom, true);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1], point[2] + 8],\r\n            [point[0] + 4, point[1] + 3, point[2] + 8],\r\n            Hallway.data.textures.bricks_1_top, true);\r\n    },\r\n\r\n    add_column_right: function(map, point)\r\n    {\r\n        var end_point = [\r\n            point[0] - 4,\r\n            point[1] + 3,\r\n            point[2] + 10\r\n        ];\r\n\r\n        Common.brush(map, point, end_point, Hallway.data.textures.bricks_1);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 2, point[1] + 0, point[2] + 0],\r\n            [point[0] - 2, point[1] + 0, point[2] + 6],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 2, point[1] + 3, point[2] + 0],\r\n            [point[0] - 2, point[1] + 3, point[2] + 6],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 2, point[1] + 1, point[2] + 6],\r\n            [point[0] - 2, point[1] + 2, point[2] + 6],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 2, point[1] + 1, point[2] + 4],\r\n            [point[0] - 2, point[1] + 2, point[2] + 4],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 2, point[1] + 1, point[2] + 2],\r\n            [point[0] - 2, point[1] + 2, point[2] + 2],\r\n            Hallway.data.textures.light_0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 4, point[1] + 0, point[2] + 0],\r\n            [point[0] - 4, point[1] + 0, point[2] + 10],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 4, point[1] + 3, point[2] + 0],\r\n            [point[0] - 4, point[1] + 3, point[2] + 10],\r\n            0);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 4, point[1], point[2]],\r\n            [point[0], point[1] + 3, point[2]],\r\n            Hallway.data.textures.bricks_1_bottom, true);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 4, point[1], point[2] + 8],\r\n            [point[0], point[1] + 3, point[2] + 8],\r\n            Hallway.data.textures.bricks_1_top, true);\r\n    },\r\n\r\n    add_support: function(map, point)\r\n    {\r\n        Common.brush(map, [point[0], point[1], point[2]], [point[0] + 16, point[1] + 1, point[2]], Hallway.data.textures.metal_0);\r\n        Common.brush(map, [point[0] + 8 - 1, point[1] - 1, point[2]], [point[0] + 8 + 1, point[1] + 2, point[2]], Hallway.data.textures.deco_3);\r\n    },\r\n\r\n    generate: function(Voxels)\r\n    {\r\n        Common.clear_map(Voxels.map);\r\n\r\n        var bricks_0 = Common.add_voxel_texture(Voxels, 10);\r\n        var bricks_1 = Common.add_voxel_texture(Voxels, 11);\r\n        var floor_tile_0 = Common.add_voxel_texture(Voxels, 12);\r\n        var floor_tile_1 = Common.add_voxel_texture(Voxels, 13);\r\n        var floor_tile_2 = Common.add_voxel_texture(Voxels, 14);\r\n        var bricks_1_bottom = Common.add_voxel_texture(Voxels, 15);\r\n        var bricks_1_top = Common.add_voxel_texture(Voxels, 16);\r\n        var deco_0 = Common.add_voxel_texture(Voxels, 17);\r\n        var light_0 = Common.add_voxel_texture(Voxels, 18);\r\n        var light_1 = Common.add_voxel_texture(Voxels, 20);\r\n        var deco_1 = Common.add_voxel_texture(Voxels, [19, 19, 19, 19, 20, 20]);\r\n        var deco_2 = Common.add_voxel_texture(Voxels, 21);\r\n        var deco_3 = Common.add_voxel_texture(Voxels, [23, 23, 23, 23, 20, 20]);\r\n        var metal_0 = Common.add_voxel_texture(Voxels, 22);\r\n        var metal_1 = Common.add_voxel_texture(Voxels, 23);\r\n        var deco_4 = Common.add_voxel_texture(Voxels, [23, 23, 23, 23, 18, 18]);\r\n\r\n        Hallway.data.textures.bricks_0 = bricks_0;\r\n        Hallway.data.textures.bricks_1 = bricks_1;\r\n        Hallway.data.textures.floor_tile_0 = floor_tile_0;\r\n        Hallway.data.textures.floor_tile_1 = floor_tile_1;\r\n        Hallway.data.textures.floor_tile_2 = floor_tile_2;\r\n        Hallway.data.textures.bricks_1_bottom = bricks_1_bottom;\r\n        Hallway.data.textures.bricks_1_top = bricks_1_top;\r\n        Hallway.data.textures.deco_0 = deco_0;\r\n        Hallway.data.textures.light_0 = light_0;\r\n        Hallway.data.textures.light_1 = light_1;\r\n        Hallway.data.textures.deco_1 = deco_1;\r\n        Hallway.data.textures.deco_2 = deco_2;\r\n        Hallway.data.textures.deco_3 = deco_3;\r\n        Hallway.data.textures.metal_0 = metal_0;\r\n        Hallway.data.textures.metal_1 = metal_1;\r\n\r\n        // 15 = center\r\n        // Floor.\r\n        Common.brush(Voxels.map, [7, 0, 0], [23, 32, 2], floor_tile_2);\r\n        Common.brush(Voxels.map, [7, 0, 3], [7, 32, 3], bricks_1);\r\n        Common.brush(Voxels.map, [23, 0, 3], [23, 32, 3], bricks_1);\r\n\r\n        Common.brush(Voxels.map, [12, 0, 2], [12, 32, 2], floor_tile_1, true);\r\n        // Common.brush(Voxels.map, [15, 0, 2], [15, 32, 2], floor_tile_1, true);\r\n        Common.brush(Voxels.map, [18, 0, 2], [18, 32, 2], floor_tile_1, true);\r\n\r\n        Common.brush(Voxels.map, [13, 0, 2], [17, 32, 2], 0);\r\n        Common.brush(Voxels.map, [14, 0, 1], [16, 31, 1], 0x01422433);\r\n\r\n        for (var i = 0; i < 32; ++i)\r\n        {\r\n            if (i % 8 == 0)\r\n                // Common.brush(Voxels.map, [15, i, 1], [15, i, 1], 0x0176D834);\r\n                Common.brush(Voxels.map, [15, i, 1], [15, i, 1], light_0);\r\n        }\r\n\r\n        Common.brush(Voxels.map, [5, 0, 0], [5, 32, 12], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [25, 0, 0], [25, 32, 12], 0x01BA2E2E);\r\n\r\n        // Left wall.\r\n        Common.brush(Voxels.map, [6, 0, 0], [6, 32, 12], bricks_1);\r\n        Common.brush(Voxels.map, [6, 0, 11], [6, 32, 11], bricks_1_top, true);\r\n\r\n        // Right wall.\r\n        Common.brush(Voxels.map, [24, 0, 0], [24, 32, 12], bricks_1);\r\n        Common.brush(Voxels.map, [24, 0, 11], [24, 32, 11], bricks_1_top, true);\r\n\r\n        Common.brush(Voxels.map, [6, 15, 7], [6, 15, 7], light_1);\r\n        Common.brush(Voxels.map, [24, 15, 7], [24, 15, 7], light_1);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        // Decoration 1.\r\n        Common.brush(Voxels.map, [7, 14, 3], [8, 16, 4], metal_0);\r\n        Common.brush(Voxels.map, [8, 15, 3], [8, 15, 3], 0);\r\n\r\n        Common.brush(Voxels.map, [8, 13, 2], [8, 13, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [9, 13, 2], [9, 13, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [9, 14, 2], [9, 14, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [9, 15, 2], [9, 15, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [9, 16, 2], [9, 16, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [9, 17, 2], [9, 17, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [8, 17, 2], [8, 17, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [8, 15, 2], [8, 15, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [7, 15, 3], [7, 15, 3], 0x01BA2E2E);\r\n\r\n        Common.brush(Voxels.map, [8, 12, 2], [8, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [9, 12, 2], [9, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 12, 2], [10, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 13, 2], [10, 13, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 14, 2], [10, 14, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 15, 2], [10, 15, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 16, 2], [10, 16, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 17, 2], [10, 17, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [10, 18, 2], [10, 18, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [9, 18, 2], [9, 18, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [8, 18, 2], [8, 18, 2], floor_tile_1);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        // Decoration 2.\r\n        Common.brush(Voxels.map, [22, 14, 3], [23, 16, 4], metal_0);\r\n        Common.brush(Voxels.map, [22, 15, 3], [22, 15, 3], 0);\r\n\r\n        Common.brush(Voxels.map, [22, 13, 2], [22, 13, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [21, 13, 2], [21, 13, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [21, 14, 2], [21, 14, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [21, 15, 2], [21, 15, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [21, 16, 2], [21, 16, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [21, 17, 2], [21, 17, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [22, 17, 2], [22, 17, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [22, 15, 2], [22, 15, 2], 0x01BA2E2E);\r\n        Common.brush(Voxels.map, [23, 15, 3], [23, 15, 3], 0x01BA2E2E);\r\n\r\n        Common.brush(Voxels.map, [22, 12, 2], [22, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [21, 12, 2], [21, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 12, 2], [20, 12, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 13, 2], [20, 13, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 14, 2], [20, 14, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 15, 2], [20, 15, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 16, 2], [20, 16, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 17, 2], [20, 17, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [20, 18, 2], [20, 18, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [21, 18, 2], [21, 18, 2], floor_tile_1);\r\n        Common.brush(Voxels.map, [22, 18, 2], [22, 18, 2], floor_tile_1);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        // Ceiling.\r\n        Common.brush(Voxels.map, [7, 0, 12], [23, 32, 20], floor_tile_2);\r\n\r\n        // Ceiling center.\r\n        Common.brush(Voxels.map, [10, 0, 12], [20, 32, 13], 0);\r\n        Common.brush(Voxels.map, [14, 0, 14], [16, 32, 18], 0);\r\n\r\n        Common.brush(Voxels.map, [14, 0, 17], [16, 32, 17], 0x01BA2E2E);\r\n\r\n        for (var i = 0; i < 32; ++i)\r\n        {\r\n            if (i % 8 == 0)\r\n            {\r\n                Common.brush(Voxels.map, [13, i, 14], [13, i + 4, 14], deco_4);\r\n                Common.brush(Voxels.map, [17, i, 14], [17, i + 4, 14], deco_4);\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < 32; ++i)\r\n        {\r\n            if (i % 6 == 0)\r\n                Common.brush(Voxels.map, [14, i, 15], [16, i + 2, 15], metal_0);\r\n        }\r\n\r\n        Common.brush(Voxels.map, [9, 0, 12], [9, 32, 12], 0);\r\n        Common.brush(Voxels.map, [21, 0, 12], [21, 32, 12], 0);\r\n\r\n        Hallway.add_support(Voxels.map, [7, 14, 13]);\r\n        Hallway.add_support(Voxels.map, [7, 29, 13]);\r\n\r\n        Common.brush(Voxels.map, [9, 0, 13], [9, 32, 13], metal_0, true);\r\n        Common.brush(Voxels.map, [21, 0, 13], [21, 32, 13], metal_0, true);\r\n        Common.brush(Voxels.map, [7, 0, 12], [8, 32, 12], bricks_1, true);\r\n        Common.brush(Voxels.map, [23, 0, 12], [22, 32, 12], bricks_1, true);\r\n\r\n        Hallway.add_column_left(Voxels.map, [7, 3, 3]);\r\n        Hallway.add_column_right(Voxels.map, [23, 3, 3]);\r\n\r\n        Hallway.add_window(Voxels.map, [6, 11, 6]);\r\n        Hallway.add_window(Voxels.map, [24, 11, 6]);\r\n\r\n        Hallway.add_window(Voxels.map, [6, 17, 6]);\r\n        Hallway.add_window(Voxels.map, [24, 17, 6]);\r\n\r\n        Hallway.add_column_left(Voxels.map, [7, 24, 3]);\r\n        Hallway.add_column_right(Voxels.map, [23, 24, 3]);\r\n\r\n        Common.brush(Voxels.map, [9, 31, 3], [10, 31, 3], deco_1);\r\n        Common.brush(Voxels.map, [20, 31, 3], [21, 31, 3], deco_1);\r\n    },\r\n\r\n    update: function(Voxels, timestamp, delta)\r\n    {\r\n        // Voxels.camera.rotation[2] = 90;\r\n\r\n        if (!Voxels.free_mode && Hallway.running)\r\n        {\r\n            var xd = timestamp * Hallway.xd;\r\n            var zd = timestamp * Hallway.zd;\r\n\r\n            var rot_x = timestamp * Hallway.rot_x;\r\n            var rot_z = timestamp * Hallway.rot_z;\r\n\r\n            // Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);\r\n            // Voxels.camera.position[1] += delta * 0.005;\r\n            Voxels.camera.position[1] += delta * 0.012;\r\n            // Voxels.camera.position[2] -= delta * 0.001;\r\n            Voxels.camera.position[2] = Voxels.camera.start_position[2] + 0.5 * Math.sin(zd);\r\n\r\n            // var angles = Common.get_camera_circle_rotation_angles(timestamp * this.camera_circle_rotation.speed, this.camera_circle_rotation);\r\n            // Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + Common.rad2deg(angles[0]);\r\n            // Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] - Common.rad2deg(angles[1]);\r\n\r\n            Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 20 * Math.sin(rot_x);\r\n            Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 60 * Math.sin(rot_z);\r\n        }\r\n    }\r\n};\r\n\r\nexport default Hallway;",
    "import Common from 'common';\r\nimport { createNoise2D } from 'simplex-noise';\r\n\r\nvar VoxelLandscape =\r\n{\r\n    name: \"Landscape\",\r\n\r\n    data: {\r\n        c0: Common.TWO_PI / 10000,\r\n        c1: Common.TWO_PI / 20000\r\n    },\r\n\r\n    setup: function(Voxels)\r\n    {\r\n        Voxels.width = 600;\r\n        Voxels.height = 300;\r\n        Voxels.scale = 2;\r\n        Voxels.clip_count = 128;\r\n        Voxels.clip_dist = 64;\r\n\r\n        Voxels.light = [.5, .7, .85, .3, .2, .95];\r\n\r\n        // Voxels.camera.start_position = [64.0, 0.0, 16.0];\r\n        Voxels.camera.start_position = [32.0, -10.0, 16.0];\r\n        Voxels.camera.start_rotation = [-20, 0, -45];\r\n        Voxels.texture_sampler.use_blank_color = true;\r\n        Voxels.texture_sampler.default_color = [114, 188, 112, 255];\r\n\r\n        Voxels.map.dims = [64, 64, 32];\r\n        Voxels.map.shift_z = 12;\r\n        Voxels.map.shift_y = 6;\r\n        Voxels.map.wrap = [true, true, false];\r\n    },\r\n\r\n    attenuation: function(v)\r\n    {\r\n        var s = 0.9;\r\n        return s * Math.sin(0.5 * Math.PI * v + Math.PI * 0.5) + (1 - s);\r\n    },\r\n\r\n    generate: function(Voxels)\r\n    {\r\n        var noise2D = createNoise2D();\r\n\r\n        for (var z = 0; z < Voxels.map.dims[2]; ++z) {\r\n            for (var y = 0; y < Voxels.map.dims[1]; ++y) {\r\n                for (var x = 0; x < Voxels.map.dims[0]; ++x) {\r\n                    Voxels.map.data[Common.get_map_index(Voxels.map, x, y, z)] = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var freq = 0.9;\r\n\r\n        for (var y = 0; y < Voxels.map.dims[1]; ++y)\r\n        {\r\n            for (var x = 0; x < Voxels.map.dims[0]; ++x)\r\n            {\r\n                var nx = 2 * x / Voxels.map.dims[0] - 1;\r\n                var ny = 2 * y / Voxels.map.dims[1] - 1;\r\n                var nz = noise2D(freq * nx, freq * ny);\r\n\r\n                var ax = VoxelLandscape.attenuation(nx);\r\n                var ay = VoxelLandscape.attenuation(ny);\r\n\r\n                nz = 0.5 * nz + 0.5;\r\n                nz *= (ax < ay ? ax : ay) * 0.5;\r\n                // nz = 0.4 * Math.pow(nz, 0.6);\r\n\r\n                var z = (nz * (Voxels.map.dims[2] - 1)) | 0;\r\n\r\n                for (var zi = 0; zi <= z; ++zi) {\r\n                    Voxels.map.data[Common.get_map_index(Voxels.map, x, y, zi)] = 1;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    update: function(Voxels, timestamp, delta)\r\n    {\r\n        var zd = timestamp * VoxelLandscape.data.c0;\r\n\r\n        var rot_x = timestamp * VoxelLandscape.data.c0;\r\n        var rot_z = timestamp * VoxelLandscape.data.c1;\r\n\r\n        Voxels.camera.position[0] += delta * 0.01;\r\n        Voxels.camera.position[1] += delta * 0.01;\r\n        Voxels.camera.position[2] = Voxels.camera.start_position[2] + 2.0 * Math.sin(zd);\r\n\r\n        Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 5 * Math.sin(rot_x);\r\n        Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 80 * Math.sin(rot_z);\r\n    }\r\n};\r\n\r\nexport default VoxelLandscape;",
    "import Common from 'common';\r\n\r\nvar Matrix =\r\n{\r\n    name: \"Matrix\",\r\n\r\n    data: {},\r\n\r\n    voxel_texture_index: 0,\r\n    running: true,\r\n\r\n    vtindex: function(offset) {\r\n        return this.voxel_texture_index + offset;\r\n    },\r\n\r\n    camera_circle_rotation: {\r\n        radius: 0.5,\r\n        center_distance: 1,\r\n        point_distance: 0,\r\n        speed: Common.TWO_PI / 10000\r\n    },\r\n\r\n    setup: function(Voxels)\r\n    {\r\n        Voxels.width = 800;\r\n        Voxels.height = 400;\r\n        Voxels.scale = 2;\r\n\r\n        Voxels.clip_count = 64;\r\n        Voxels.clip_dist = 32;\r\n\r\n        Voxels.map.dims = [4, 4, 4];\r\n        Voxels.map.shift_z = 4;\r\n        Voxels.map.shift_y = 2;\r\n        Voxels.camera.start_position = [0.5, 0, 3.5];\r\n\r\n        // Voxels.map.dims = [8, 8, 8];\r\n        // Voxels.map.shift_z = 6;\r\n        // Voxels.map.shift_y = 3;\r\n        // Voxels.camera.start_position = [-1.5, 0, 3.5];\r\n\r\n        // Voxels.camera.start_rotation = [0, 0, -90.0];\r\n        Voxels.map.wrap = [true, true, true];\r\n        Voxels.texture_sampler.use_blank_color = false;\r\n\r\n        this.camera_circle_rotation.point_distance = Math.sqrt(\r\n            this.camera_circle_rotation.radius * this.camera_circle_rotation.radius +\r\n            this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance\r\n        );\r\n\r\n        // Textures.\r\n        this.voxel_texture_index = Voxels.voxel_textures.length;\r\n\r\n        Voxels.voxel_textures.push([3, 3, 3, 3, 6, 6]);\r\n        Voxels.voxel_textures.push([1, 1, 1, 1, 6, 6]);\r\n        Voxels.voxel_textures.push([2, 2, 2, 2, 2, 2]);\r\n        Voxels.voxel_textures.push([4, 4, 4, 4, 4, 4]);\r\n        Voxels.voxel_textures.push([5, 5, 5, 5, 5, 5]);\r\n    },\r\n\r\n    generate: function(Voxels)\r\n    {\r\n        for (var z = 0; z < Voxels.map.dims[2]; ++z) {\r\n            for (var y = 0; y < Voxels.map.dims[1]; ++y) {\r\n                for (var x = 0; x < Voxels.map.dims[0]; ++x) {\r\n                    Voxels.map.data[Common.get_map_index(Voxels.map, x, y, z)] = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        Common.map_add_object(Voxels.map, [2, 2, 1], Voxels.voxel_objects[Voxels.c$.OBJ_CUBE]);\r\n    },\r\n\r\n    update: function(Voxels, timestamp, delta)\r\n    {\r\n        if (!Voxels.free_mode && Matrix.running)\r\n        {\r\n            var xd = timestamp * Common.TWO_PI / 5000;\r\n            var zd = timestamp * Common.TWO_PI / 10000;\r\n\r\n            // Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);\r\n\r\n            Voxels.camera.position[1] += delta * 0.005;\r\n            Voxels.camera.position[2] -= delta * 0.001;\r\n\r\n            // Voxels.camera.position[2] = Voxels.camera.start_position[2] + 5.0 * Math.sin(zd);\r\n\r\n            var angles = Common.get_camera_circle_rotation_angles(timestamp * this.camera_circle_rotation.speed, this.camera_circle_rotation);\r\n\r\n            Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + Common.rad2deg(angles[0]);\r\n            Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] - Common.rad2deg(angles[1]);\r\n        }\r\n    }\r\n};\r\n\r\nexport default Matrix;",
    "import Common from 'common';\r\n\r\nvar SpaceStation =\r\n{\r\n    name: \"SpaceStation\",\r\n    data: {\r\n        textures: {}\r\n    },\r\n\r\n    xd: Common.TWO_PI / 8000,\r\n    zd: Common.TWO_PI / 15000,\r\n\r\n    running: true,\r\n\r\n    camera_circle_rotation: {\r\n        radius: 0.3,\r\n        center_distance: 1,\r\n        point_distance: 0,\r\n        speed: Common.TWO_PI / 10000\r\n    },\r\n\r\n    setup: function(Voxels)\r\n    {\r\n        Voxels.width = 800;\r\n        Voxels.height = 400;\r\n        Voxels.scale = 2;\r\n\r\n        Voxels.map.dims = [32, 64, 32];\r\n        Voxels.map.shift_z = 11;\r\n        Voxels.map.shift_y = 5;\r\n\r\n        Voxels.camera.start_position = [16, 0, 9];\r\n        Voxels.camera.start_rotation = [0, 0, 0];\r\n        Voxels.camera.rotation = [0, 0, 0];\r\n\r\n        // Voxels.camera.rotation[0] = 35;\r\n        // Voxels.camera.rotation[2] = 90;\r\n\r\n        Voxels.map.wrap = [false, true, false];\r\n        Voxels.texture_sampler.use_blank_color = false;\r\n        Voxels.texture_sampler.default_color = [150, 150, 150];\r\n\r\n        Voxels.clip_count = 128;\r\n        Voxels.clip_dist = 80;\r\n\r\n        Voxels.light = [.6, .6, .85, .35, .3, .95],\r\n        Voxels.light_mult = 1.4;\r\n\r\n        this.camera_circle_rotation.point_distance = Math.sqrt(\r\n            this.camera_circle_rotation.radius * this.camera_circle_rotation.radius +\r\n            this.camera_circle_rotation.center_distance * this.camera_circle_rotation.center_distance\r\n        );\r\n    },\r\n\r\n    add_tower_left: function(map, point)\r\n    {\r\n        Common.brush(map,\r\n            point,\r\n            [point[0], point[1], point[2] + 19],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0] - 1, point[1], point[2]],\r\n            [point[0] - 1, point[1], point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 1, point[1], point[2]],\r\n            [point[0] + 1, point[1], point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] - 1, point[2]],\r\n            [point[0], point[1] - 1, point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2]],\r\n            [point[0], point[1] + 1, point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0] - 1, point[1], point[2] + 9],\r\n            [point[0] - 1, point[1], point[2] + 15],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 1, point[1], point[2] + 10],\r\n            [point[0] + 1, point[1], point[2] + 13],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] - 1, point[2] + 10],\r\n            [point[0], point[1] - 1, point[2] + 14],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2] + 11],\r\n            [point[0], point[1] + 1, point[2] + 16],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1], point[2] + 17],\r\n            [point[0], point[1], point[2] + 17],\r\n            0);\r\n    },\r\n\r\n    add_tower_right: function(map, point)\r\n    {\r\n        Common.brush(map,\r\n            point,\r\n            [point[0], point[1], point[2] + 19],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0] - 1, point[1], point[2]],\r\n            [point[0] - 1, point[1], point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0] + 1, point[1], point[2]],\r\n            [point[0] + 1, point[1], point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] - 1, point[2]],\r\n            [point[0], point[1] - 1, point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2]],\r\n            [point[0], point[1] + 1, point[2] + 7],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0] + 1, point[1], point[2] + 9],\r\n            [point[0] + 1, point[1], point[2] + 15],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0] - 1, point[1], point[2] + 10],\r\n            [point[0] - 1, point[1], point[2] + 13],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] - 1, point[2] + 10],\r\n            [point[0], point[1] - 1, point[2] + 14],\r\n            0x01cccccc);\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1] + 1, point[2] + 11],\r\n            [point[0], point[1] + 1, point[2] + 16],\r\n            0x01cccccc);\r\n\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        Common.brush(map,\r\n            [point[0], point[1], point[2] + 17],\r\n            [point[0], point[1], point[2] + 17],\r\n            0);\r\n    },\r\n\r\n    add_tunnel: function(map, y)\r\n    {\r\n        Common.brush(map, [4, y, 10], [27, y + 8, 16], 0x01cccccc);\r\n        // Common.brush(map, [4, y + 10, 10], [27, y + 18, 16], 0x01cccccc);\r\n\r\n        Common.brush(map, [4, y, 11], [4, y + 8, 11], 0);\r\n        Common.brush(map, [27, y, 11], [27, y + 8, 11], 0);\r\n\r\n        Common.brush(map, [15, y, 16], [16, y + 8, 16], 0);\r\n        Common.brush(map, [4, y, 12], [10, y + 8, 16], 0);\r\n        Common.brush(map, [21, y, 12], [27, y + 8, 16], 0);\r\n        Common.brush(map, [12, y, 11], [19, y + 8, 15], 0);\r\n        Common.brush(map, [7, y, 10], [24, y + 8, 10], 0);\r\n\r\n        Common.brush(map, [11, y, 16], [11, y + 8, 16], 0);\r\n        Common.brush(map, [12, y, 15], [12, y + 8, 15], 0x01cccccc);\r\n\r\n        Common.brush(map, [20, y, 16], [20, y + 8, 16], 0);\r\n        Common.brush(map, [19, y, 15], [19, y + 8, 15], 0x01cccccc);\r\n    },\r\n\r\n    generate: function(Voxels)\r\n    {\r\n        Common.clear_map(Voxels.map, true);\r\n        Common.brush(Voxels.map, [4, 0, 5], [27, 63, 30], 0);\r\n\r\n        Common.brush(Voxels.map, [0, 0, 0], [10, 63, 9], 0x01cccccc);\r\n        Common.brush(Voxels.map, [21, 0, 0], [31, 63, 9], 0x01cccccc);\r\n        Common.brush(Voxels.map, [0, 0, 0], [31, 63, 5], 0x01cccccc);\r\n\r\n        Common.brush(Voxels.map, [14, 0, 5], [17, 63, 5], 0);\r\n        Common.brush(Voxels.map, [15, 0, 4], [16, 63, 4], 0);\r\n        Common.brush(Voxels.map, [8, 0, 7], [10, 63, 7], 0);\r\n        Common.brush(Voxels.map, [21, 0, 7], [23, 63, 7], 0);\r\n\r\n        Common.brush(Voxels.map, [11, 0, 9], [11, 63, 9], 0x01cccccc);\r\n        Common.brush(Voxels.map, [20, 0, 9], [20, 63, 9], 0x01cccccc);\r\n\r\n        Common.brush(Voxels.map, [8, 13, 5], [23, 18, 9], 0);\r\n\r\n        SpaceStation.add_tower_left(Voxels.map, [10, 15, 5]);\r\n        SpaceStation.add_tower_right(Voxels.map, [21, 15, 5]);\r\n\r\n        SpaceStation.add_tunnel(Voxels.map, 20);\r\n        SpaceStation.add_tunnel(Voxels.map, 40);\r\n\r\n        SpaceStation.add_tower_left(Voxels.map, [5, 4, 8]);\r\n        SpaceStation.add_tower_right(Voxels.map, [26, 4, 8]);\r\n\r\n        for (var i = 0; i < 64; ++i)\r\n        {\r\n            if (i % 9 == 0)\r\n            {\r\n                Common.brush(Voxels.map, [11, i, 5], [11, i + 3, 5], 0);\r\n                Common.brush(Voxels.map, [20, i, 5], [20, i + 3, 5], 0);\r\n            }\r\n        }\r\n    },\r\n\r\n    update: function(Voxels, timestamp, delta)\r\n    {\r\n        if (!Voxels.free_mode && SpaceStation.running)\r\n        {\r\n            var xd = timestamp * SpaceStation.xd;\r\n            var zd = timestamp * SpaceStation.zd;\r\n            \r\n            Voxels.camera.position[0] = Voxels.camera.start_position[0] + 1.0 * Math.sin(xd);\r\n            Voxels.camera.position[1] += delta * 0.03;\r\n            Voxels.camera.position[2] = Voxels.camera.start_position[2] + 1.5 * Math.sin(zd);\r\n        }\r\n    }\r\n};\r\n\r\n    export default SpaceStation;\r\n",
    "import Common from 'common';\r\n\r\nvar TestRoom =\r\n{\r\n    name: \"Test room\",\r\n\r\n    data: {},\r\n\r\n    setup: function(Voxels)\r\n    {\r\n        Voxels.width = 800;\r\n        Voxels.height = 400;\r\n        Voxels.scale = 2;\r\n        Voxels.clip_count = 64;\r\n        Voxels.clip_dist = 32;\r\n\r\n        Voxels.light = [.5, .7, .85, .2, .2, .95];\r\n\r\n        // Voxels.camera.start_position = [64.0, 0.0, 16.0];\r\n        Voxels.camera.start_position = [2.5, -4.0, 1.5];\r\n        Voxels.camera.start_rotation = [0, 0, 0];\r\n        Voxels.texture_sampler.use_blank_color = false;\r\n        Voxels.texture_sampler.default_color = [114, 188, 112, 255];\r\n\r\n        Voxels.map.dims = [8, 8, 8];\r\n        Voxels.map.shift_z = 6;\r\n        Voxels.map.shift_y = 3;\r\n        // Voxels.map.wrap = [true, true, true];\r\n        Voxels.map.wrap = [true, true, true];\r\n    },\r\n\r\n    generate: function(Voxels)\r\n    {\r\n        Common.brush(Voxels.map, [0, 0, 0], [0, 7, 2], 0x010000ff);\r\n        Common.brush(Voxels.map, [4, 0, 0], [4, 7, 2], 0x01ff0000);\r\n        Common.brush(Voxels.map, [4, 1, 1], [4, 7, 1], 0);\r\n        Common.brush(Voxels.map, [0, 1, 1], [0, 7, 1], 0);\r\n\r\n        Common.brush(Voxels.map, [0, 4, 0], [4, 4, 2], 0x01009900);\r\n        Common.brush(Voxels.map, [1, 4, 1], [3, 4, 1], 0);\r\n\r\n        Common.brush(Voxels.map, [2, 0, 3], [2, 7, 3], 0x01cc9955);\r\n    },\r\n\r\n    update: function(Voxels, timestamp, delta)\r\n    {\r\n        var rot_x = timestamp * Common.TWO_PI / 10000;\r\n        var rot_z = timestamp * Common.TWO_PI / 20000;\r\n\r\n        var zd = timestamp * Common.TWO_PI / 10000;\r\n\r\n        Voxels.camera.position[0] = Voxels.camera.start_position[0] + 0.4 * Math.sin(zd * 2);\r\n        Voxels.camera.position[1] += delta * 0.01;\r\n        Voxels.camera.position[2] = Voxels.camera.start_position[2] + 0.2 * Math.sin(zd);\r\n\r\n        Voxels.camera.rotation[0] = Voxels.camera.start_rotation[0] + 20 * Math.sin(rot_x);\r\n        Voxels.camera.rotation[2] = Voxels.camera.start_rotation[2] + 50 * Math.sin(rot_z);\r\n    }\r\n};\r\n\r\nexport default TestRoom;"
  ]
}